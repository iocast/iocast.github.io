<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    
    <title>iocast - iocast.github.io</title>
    <link href="http://iocast.github.io/atom.xml" rel="self"/>
    <link href="http://iocast.github.io"/>
    <updated>2013-11-11T07:35:08+00:00</updated>
    <id>http://iocast.github.io/</id>
    <author>
        <name>iocast</name>
        <email>iocast@me.com</email>
    </author>
    
    
    <entry>
        <title>Installation of PostgreSQL 9.3, PostGIS 2.1, PLR with R 3.0.2 and libgdal1h (libgdal >= 1.10.0) on Ubuntu 12.03 LTS (precise)</title>
        <link href="http://iocast.github.io/blog/2013/11/11/postgresql-postgis-plr-libgdal1h.html"/>
        <updated>2013-11-11T00:00:00+00:00</updated>
        <id>http://iocast.github.io/blog/2013/11/11/postgresql-postgis-plr-libgdal1h</id>
        <content type="html">&lt;a name=&quot;Removing.preinstalled.packages&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Removing preinstalled packages&lt;/h2&gt;

&lt;p&gt;First we need to check which PostgreSQL, PostGIS and GDAL versions are installed. To do so check your Debian package management system (dpkg).
&lt;code&gt;bash
dpkg -l | grep 'postgres\|gdal'
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should get a list like the following one:
&lt;code&gt;
ii  libgdal-dev                        1.10.0-1~precise1                 Geospatial Data Abstraction Library - Development files
ii  libgdal1-dev                       1.10.0-1~precise1                 Geospatial Data Abstraction Library - Development files
ii  libgdal1h                          1.10.0-1~precise1                 Geospatial Data Abstraction Library
ii  postgresql-9.1                     9.1.10-0ubuntu12.04               object-relational SQL database, version 9.1 server
ii  postgresql-9.1-postgis-2.0         2.0.3-2~precise4                  Geographic objects support for PostgreSQL 9.1
ii  postgresql-9.1-postgis-2.0-scripts 2.0.3-2~precise4                  Geographic objects support for PostgreSQL 9.1 -- scripts
ii  postgresql-client-9.1              9.1.10-0ubuntu12.04               front-end programs for PostgreSQL 9.1
ii  postgresql-client-common           129ubuntu1                        manager for multiple PostgreSQL client versions
ii  postgresql-common                  129ubuntu1                        PostgreSQL database-cluster manager
ii  postgresql-contrib-9.1             9.1.10-0ubuntu12.04               additional facilities for PostgreSQL
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want, you could remove these packages as follow:
&lt;code&gt;bash
apt-get purge libgdal-dev libgdal1-dev libgdal1h postgresql-9.1 postgresql-9.1-postgis-2.0 postgresql-9.1-postgis-2.0-scripts postgresql-client-9.1 postgresql-client-common postgresql-common
apt-get autoremove
apt-get autoclean
&lt;/code&gt;&lt;/p&gt;

&lt;a name=&quot;Installing.PostgreSQL.9.3&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Installing PostgreSQL 9.3&lt;/h2&gt;

&lt;p&gt;First you need to find out your release code name:
&lt;code&gt;bash
lsb_release -c
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which get you something like that &lt;code&gt;Codename:  precise&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new file &lt;code&gt;codename-pgdg.list&lt;/code&gt; in &lt;code&gt;/etc/apt/sources.list.d&lt;/code&gt; according to the &lt;a href=&quot;https://wiki.postgresql.org/wiki/Apt&quot; title=&quot;Apt - PostgreSQL wiki&quot;&gt;PostgreSQL wiki page&lt;/a&gt;.
&lt;code&gt;bash
vi /etc/apt/sources.list.d/precise-pgdg.list
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and add the following line
&lt;code&gt;bash
deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we need to import the repository key from
&lt;code&gt;bash
wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can a update the repository and install the required packages from the PostgreSQL repository.
&lt;code&gt;bash
apt-get update
apt-get install postgresql-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3
&lt;/code&gt;&lt;/p&gt;

&lt;a name=&quot;Compiling.PostGIS.2.1.against.libgdal....1.10.0&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Compiling PostGIS 2.1 against libgdal &gt;= 1.10.0&lt;/h2&gt;

&lt;p&gt;To install PostGIS 2.1 it is important that &lt;code&gt;postgresql-server-dev-x.x&lt;/code&gt; is installed, because we need to compile PostGIS against these source files. We are going the install the precompiled &lt;code&gt;libgdal&lt;/code&gt; 1.10.0 version from ubuntugis.&lt;/p&gt;

&lt;p&gt;Install &lt;code&gt;python-software-properties&lt;/code&gt; and add the apt sources (repositories):
&lt;code&gt;bash
apt-get install python-software-properties
add-apt-repository ppa:ubuntugis/ubuntugis-unstable
apt-get update
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now install the new GDAL library called &lt;code&gt;libgdal1h&lt;/code&gt; and its' development package
&lt;code&gt;bash
apt-get install libgdal1h
apt-cache showpkg libgdal-dev*
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which gets you something like that:
&lt;code&gt;bash
...
Provides:
1.10.0-1~precise1 -
1.9.0-3.1~pgdg12.4+1 -
...
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can install a version using the &lt;code&gt;-f&lt;/code&gt; flag
&lt;code&gt;bash
apt-get install -f libgdal-dev=1.10.0-1~precise1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Before installing the PostGIS from source we install the required dependencies.
&lt;code&gt;bash
apt-get install make gcc checkinstall libxml2-dev libproj-dev libgeos-dev
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Download the latest PostGIS source and compile it
&lt;code&gt;bash
wget http://download.osgeo.org/postgis/source/postgis-2.1.0.tar.gz
tar xzvf postgis-2.1.0.tar.gz
cd postgis-2.1.0
./configure
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; PostGIS is now configured for x86_64-unknown-linux-gnu

-------------- Compiler Info ------------- 
 C compiler:           gcc -g -O2
 C++ compiler:         g++ -g -O2
 SQL preprocessor:     /usr/bin/cpp -traditional-cpp -P

-------------- Dependencies -------------- 
 GEOS config:          /usr/bin/geos-config
 GEOS version:         3.3.8
 GDAL config:          /usr/bin/gdal-config
 GDAL version:         1.10.0
 PostgreSQL config:    /usr/bin/pg_config
 PostgreSQL version:   PostgreSQL 9.3.1
 PROJ4 version:        48
 Libxml2 config:       /usr/bin/xml2-config
 Libxml2 version:      2.8.0
 JSON-C support:       no
 PostGIS debug level:  0
 Perl:                 /usr/bin/perl

--------------- Extensions --------------- 
 PostGIS Raster:       enabled
 PostGIS Topology:     enabled
 SFCGAL support:       disabled

-------- Documentation Generation -------- 
 xsltproc:             
 xsl style sheets:     
 dblatex:              
 convert:              
 mathml2.dtd:          http://www.w3.org/Math/DTD/mathml2/mathml2.dtd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;use &lt;code&gt;checkinstall&lt;/code&gt;, which runs &lt;code&gt;make install&lt;/code&gt; and registers the package in &lt;code&gt;dpkg&lt;/code&gt;.
&lt;code&gt;bash
make
checkinstall
&lt;/code&gt;&lt;/p&gt;

&lt;a name=&quot;R.3.0.2.and.PL.R.for.PostgreSQL&quot;&gt;&lt;/a&gt;
&lt;h2&gt;R 3.0.2 and PL/R for PostgreSQL&lt;/h2&gt;

&lt;p&gt;Before we can install PL/R extension for PostgreSQL 9.3 we need to install R 3.0.2 as describe on the &lt;a href=&quot;http://cran.r-project.org&quot; title=&quot;The Comprehensive R Archive Network&quot;&gt;R-Project&lt;/a&gt; site. First edit the
&lt;code&gt;bash
vi /etc/apt/sources.list
&lt;/code&gt;
and add the following line and do a update
&lt;code&gt;bash
deb http://cran.r-project.org/bin/linux/ubuntu precise/
&lt;/code&gt;
as well as the key
&lt;code&gt;bash
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
apt-get update
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The search for the 3.0.2 R package version and install it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;apt-cache showpkg r-base
apt-get install -f r-base=3.0.2-1precise0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly we can install the PL/R extension for PostgreSQL from the PostgreSQL apt repository
&lt;code&gt;bash
apt-get install postgresql-9.3-plr
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So ... we are ready ... have fun.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>How to install python 2.7.x on a CentOS 6 and compiling mod_wsgi against Python 2.7.x</title>
        <link href="http://iocast.github.io/blog/2013/10/16/centos-python-modwsgi.html"/>
        <updated>2013-10-16T00:00:00+00:00</updated>
        <id>http://iocast.github.io/blog/2013/10/16/centos-python-modwsgi</id>
        <content type="html">&lt;p&gt;When you have installed CentOS 6 using the minimal image we need first to do some preparation. Fist login into your system and enable your &lt;code&gt;eth0&lt;/code&gt; at startup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and set &lt;code&gt;ONBOOT&lt;/code&gt; to &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;a name=&quot;Getting.Python.2.7.x&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Getting Python 2.7.x&lt;/h2&gt;

&lt;p&gt;The following explanations are based on a blog of &lt;a href=&quot;http://blog.nickhowell.co.uk/2010/11/30/setup-osqa-on-centos-5-5&quot; title=&quot;Setup OSQA on CentOS 5.5 | nickhowell.co.uk&quot;&gt;Asim Teeshan&lt;/a&gt; and a post on &lt;a href=&quot;http://www.fir3net.com/Redhat-/-Fedora/how-do-i-compile-modwgsi-for-python-27.html&quot; title=&quot;How do I compile mod_wsgi for Python 2.7&quot;&gt;Fire3Net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we need some development tools. Install the following once&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install gcc make zlib-devel bzip2-devel openssl-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now download the latest 2.7.x Python release and enable shared library during the configuation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cd /opt/
wget http://python.org/ftp/python/2.7.5/Python-2.7.5.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract and install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;tar -zxvf Python-2.7.5.tgz
cd Python-2.7.5
./configure --enable-shared
make &amp;amp;&amp;amp; make altinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Python setuptools for using &lt;code&gt;easy_setup&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg
sh setuptools-0.6c11-py2.7.egg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we can install &lt;code&gt;mod_wsgi&lt;/code&gt; we need to install the http development libraries&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install httpd httpd-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to compile &lt;code&gt;mod_wsgi&lt;/code&gt; against Python 2.7.x&lt;/p&gt;

&lt;p&gt;Download and unpack the latest version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget http://modwsgi.googlecode.com/files/mod_wsgi-3.4.tar.gz
tar -zxvf mod_wsgi-3.4.tar.gz
cd mod_wsgi-3.4.tar.gz
./configure --with-python=/usr/local/bin/python2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you specify the path to the python binary. You can find out where your Python binary is by issuing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;whereis python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the configuration completed you can install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run into problems along the lines &lt;strong&gt;cannot load shared library libpython2.7...&lt;/strong&gt; then you need run the &lt;code&gt;ldconfig&lt;/code&gt; first to tell where the &lt;code&gt;libpython2.7.so*&lt;/code&gt; files are:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ln -s /usr/local/lib/libpython2.7.so.1.0 /usr/lib/
ln -s /usr/local/lib/libpython2.7.so /usr/
ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly we can install &lt;code&gt;virtualenv&lt;/code&gt; as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz
tar -zxvf virtualenv-1.10.1.tar.gz
cd virtualenv-1.10.1
python2.7 setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;install psycopg2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget --no-check-certificate https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.1.tar.gz
tar -zxvf psycopg2-2.5.1.tar.gz
cd psycopg2-2.5.1
vi setup.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the following line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pg_config=/usr/pgsql-9.3/bin/pg_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now install it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;/usr/local/bin/python2.7 setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now creating a virtual env for you web application do it as follow&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;virtualenv-2.7 --system-site-packages ENV
&lt;/code&gt;&lt;/pre&gt;
</content>
    </entry>
    
    <entry>
        <title>Setting up a QGIS server and PostGIS on CentOS 6</title>
        <link href="http://iocast.github.io/blog/2013/10/12/qgis-server-centos.html"/>
        <updated>2013-10-12T00:00:00+00:00</updated>
        <id>http://iocast.github.io/blog/2013/10/12/qgis-server-centos</id>
        <content type="html">&lt;p&gt;QGIS server provides a web map server (WMS) by simply copying a QGIS project int the server directory. If you want to depend on newer &lt;code&gt;postgresql-libs&lt;/code&gt; you need first to install the desired version of PostgreSQL and PostGIS as described bellow.&lt;/p&gt;

&lt;a name=&quot;PostgreSQL.and.PostGIS&quot;&gt;&lt;/a&gt;
&lt;h2&gt;PostgreSQL and PostGIS&lt;/h2&gt;

&lt;p&gt;The following instructions are adapted from  &lt;a href=&quot;http://wiki.postgresql.org/wiki/YUM_Installation#Configure_your_YUM_repository&quot;&gt;YUM installation - PostgreSQL wiki&lt;/a&gt; and &lt;a href=&quot;http://trac.osgeo.org/postgis/wiki/UsersWikiPostGIS20CentOS6pgdg&quot;&gt;UsersWikiuPostGIS20CentOS6pgdg - PostGIS&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Configuration&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Configure yum repository&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vi /etc/yum.repos.d/CentOS-Base.repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and add the following excludes to &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;updates&lt;/code&gt; sections:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;exclude=postgresql*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;a name=&quot;Install.PGDG.RPM.file&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Install PGDG RPM file&lt;/h3&gt;

&lt;p&gt;A PGDG file is available for each distribution/architecture/database version combination at &lt;a href=&quot;http://yum.postgresql.org&quot;&gt;http://yum.postgresql.org&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget http://yum.postgresql.org/&amp;lt;version&amp;gt;/&amp;lt;distribution&amp;gt;/&amp;lt;architecture&amp;gt;/pgdg-&amp;lt;database&amp;gt;.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where version is &lt;code&gt;9.3&lt;/code&gt;, distribution is &lt;code&gt;redhat&lt;/code&gt;, architecture is &lt;code&gt;rhel-6-x86_64&lt;/code&gt; and database is &lt;code&gt;centos93-9.3-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install RPM distribution:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;rpm -ivh pgdg-centos93-9.3-1.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;a name=&quot;Installation.of.PostgreSQL.and.PostGIS&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Installation of PostgreSQL and PostGIS&lt;/h3&gt;

&lt;p&gt;List the available packages:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum list postgres*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install postgresql93-libs.x86_64 postgresql93-server.x86_64 postgresql93-devel.x86_64 postgis2_93
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;a name=&quot;Configuration&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Now perform a few post-installation setup commands, in the order: (1) Initialize the database cluster (required), (2) start database (recommended, if you want to use it straight away), (3) allow it to start-up automatically on reboot (recommended):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;service postgresql-9.3 initdb
service postgresql-9.3 start
chkconfig postgresql-9.3 on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some important files&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;File / Application                       &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;/var/lib/pgsql/9.3/data/postgresql.conf  &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; changing host etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;/var/lib/pgsql/9.3/data/pg_hba.conf      &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; client authentication configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;In the &lt;code&gt;pg_hba.conf&lt;/code&gt; file comment out the &lt;code&gt;ident&lt;/code&gt; lines except for unix domain socket and add two new lines for &lt;code&gt;md5 encryption&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# IPv4 local connections:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#host    all             all             127.0.0.1/32            ident&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;host    all             all             127.0.0.1/32            md5&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;# IPv6 local connections&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#host    all             all             ::1/128                 ident&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;host    all             all             ::1/128                 md5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;a name=&quot;Database.and.User&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Database and User&lt;/h3&gt;

&lt;p&gt;Before we can start, we need to create a new database and user.&lt;/p&gt;

&lt;p&gt;Login as &lt;code&gt;postgres&lt;/code&gt; superuser and create a new database&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;su -l postgres
createdb gis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Login into the database create a user and set a encrypted password&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;psql gis
CREATE USER gis WITH SUPERUSER LOGIN PASSWORD &lt;span class=&quot;s1&quot;&gt;&amp;#39;gis&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ALTER USER gis WITH ENCRYPTED PASSWORD &lt;span class=&quot;s1&quot;&gt;&amp;#39;gis&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now test your configuration and install PostGIS extension&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;psql -h localhost -d gis -U gis -W
CREATE EXTENSION postgis&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;a name=&quot;Installation.QGIS&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Installation QGIS&lt;/h2&gt;

&lt;p&gt;First you need a running CentOS on a machine. In the default CentOS software repository &lt;code&gt;qgis-server&lt;/code&gt; is not available. So you need first to add extra packages for enterprise linux (EPEL) repository as follow:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-&amp;lt;version&amp;gt;.noarch.rpm
rpm -Uvh epel-release-&amp;lt;version&amp;gt;.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the version I have tested it was &lt;code&gt;6-8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the ELGIS repositories&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget http://elgis.argeo.org/repos/6/elgis-release-&amp;lt;version&amp;gt;.noarch.rpm
rpm -Uvh elgis-release-6-6_0.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the version I have tested it was &lt;code&gt;6-6_0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now install QGIS server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install qgis-mapserver.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to have QGIS libraries, QGIS Desktop run the following command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install qgis*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The scripts and configs are installed on CentOS:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;Script / Config                       &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;/usr/libexec/qgis/qgis_mapserv.fcgi   &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; main fast cgi script (OGC capabilities)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;/etc/httpd/conf.d/qgis-mapserver.conf &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; qgis mapserver httpd configuration file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

</content>
    </entry>
    
    <entry>
        <title>Mac OS X file server migration</title>
        <link href="http://iocast.github.io/blog/2013/10/09/osx-file-server-migration.html"/>
        <updated>2013-10-09T00:00:00+00:00</updated>
        <id>http://iocast.github.io/blog/2013/10/09/osx-file-server-migration</id>
        <content type="html">&lt;p&gt;Managing a OS X server is sometimes a pain, when it comes to manage ACL permissions on the file system using OS X Server share point application. For example if you want to migrate from one file server to another you need to define all shares and ACLs again or if you want to propagate permissions on a share with explicit ACLs on a sub-directory you are going to overwrite these explicit ACLs.&lt;/p&gt;

&lt;p&gt;So to solve these problems and many more I created a little bash script which is able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sync files from a remote server using &lt;code&gt;rsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changing the POSIX permissions on the local server after sync&lt;/li&gt;
&lt;li&gt;creating optionally a share point for each folder to be synced&lt;/li&gt;
&lt;li&gt;propagating ACLs on a share point or on a individual directory.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Each of these feature can be used independently. For more information see the project description: &lt;a href=&quot;/projects/file-server-migration.html&quot;&gt;server migration tool&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>Creating your own blog using github pages, jekyll and travis</title>
        <link href="http://iocast.github.io/blog/2013/10/08/github-jekyll-travis.html"/>
        <updated>2013-10-08T00:00:00+00:00</updated>
        <id>http://iocast.github.io/blog/2013/10/08/github-jekyll-travis</id>
        <content type="html">&lt;p&gt;Github offers at the time of writing three different types of pages: for &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages&quot; title=&quot;Github Pages (Help)&quot;&gt;users, organizations and projects&lt;/a&gt;. For the users and organizations the &lt;code&gt;master&lt;/code&gt; branch is going to be used to deploy as static web page. For projects, means in a repository which is not called &lt;code&gt;username.github.io&lt;/code&gt;, a subpath of the user pages would be created &lt;code&gt;username.github.io/projectname&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hence this post is going to discuss the a simple workflow using &lt;a href=&quot;http://github.com/&quot; title=&quot;Github&quot;&gt;Github's&lt;/a&gt; user pages, &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll&quot;&gt;jekyll&lt;/a&gt; as blog and pseudo dynamic page, &lt;a href=&quot;http://travis-ci.org&quot; title=&quot;Travis CI&quot;&gt;travis&lt;/a&gt; as our continuous integration solution for deployment purposes.&lt;/p&gt;

&lt;a name=&quot;Github&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Github&lt;/h2&gt;

&lt;p&gt;First setup a new user page on Github using for example the page generator or simply setting up a new repository called &lt;code&gt;username.github.io&lt;/code&gt;. Github will automatically create a new &lt;code&gt;master&lt;/code&gt; branch which is used for deploying the content to the web server. In our case, we need to have a separate branch for our blog which is setup using &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll&quot;&gt;jekyll&lt;/a&gt;. Therefore create a new branch e.g. called &lt;code&gt;develop&lt;/code&gt; as follow&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Creates our branch, without any parents (it&amp;#39;s an orphan!)&lt;/span&gt;
git checkout --orphan develop
&lt;span class=&quot;c&quot;&gt;# Remove all files from the old working tree&lt;/span&gt;
git rm -rf .

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My GitHub Page&amp;quot;&lt;/span&gt; &amp;gt; index.html
git add index.html
git commit -a -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;First pages commit&amp;quot;&lt;/span&gt;
git push origin develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we are ready to add our &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll&quot;&gt;jekyll&lt;/a&gt; page to this &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;

&lt;a name=&quot;Jekyll&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Now that we have a &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branch, former for the &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll&quot;&gt;jekyll&lt;/a&gt; compilation and later for your source, we can setup our blog. As described in the &lt;a href=&quot;http://jekyllrb.com/docs/home/&quot; title=&quot;Jekyll Documentation&quot;&gt;jekyll documentation&lt;/a&gt; we need to have at least a &lt;code&gt;_layouts&lt;/code&gt; directory for the templates that wrap posts, a &lt;code&gt;_posts&lt;/code&gt; for dynamic content and the rest of html and other files for you layout.&lt;/p&gt;

&lt;p&gt;In addition we need to setup a &lt;code&gt;_config.yml&lt;/code&gt; file to tell &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll&quot;&gt;jekyll&lt;/a&gt; the compilation options. A example could look like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;./_site&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;lsi&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pygments&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rdiscount&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;rdiscount&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;smart&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Gemfile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Gemfile.lock&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Rakefile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;update-gh-pages.sh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;a name=&quot;Travis.CI&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Travis CI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://travis-ci.org&quot; title=&quot;Travis CI&quot;&gt;Travis&lt;/a&gt; is used to automatically deploy the &lt;code&gt;develop&lt;/code&gt; branch and push the result of the &lt;code&gt;jekyll build&lt;/code&gt; output to the &lt;code&gt;master&lt;/code&gt; branch which the would be published to the Github pages.&lt;/p&gt;

&lt;p&gt;For that we need first to get &lt;a href=&quot;http://travis-ci.org&quot; title=&quot;Travis CI&quot;&gt;travis&lt;/a&gt; access to our Github repository. If you do not have a &lt;a href=&quot;http://travis-ci.org&quot; title=&quot;Travis CI&quot;&gt;travis&lt;/a&gt; account register one on the homepage. On The &lt;a href=&quot;http://travis-ci.org&quot; title=&quot;Travis CI&quot;&gt;travis&lt;/a&gt; homepage go to the account settings and get access to the appropriate repository like in the image below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/travis_repository_access.png&quot; title=&quot;Travis Repository Access&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to configure the build process. For that create a new file called &lt;code&gt;.travis.yml&lt;/code&gt; in the root directory of the &lt;code&gt;develop&lt;/code&gt; branch and add the &lt;code&gt;master&lt;/code&gt; branch to the blacklist and the &lt;code&gt;develop&lt;/code&gt; branch to the whitelist.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1.9.3&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;master&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;develop&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rake travis&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see in the &lt;code&gt;.travis.yml&lt;/code&gt; file the &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll&quot;&gt;jekyll&lt;/a&gt; deployment starts with the command &lt;code&gt;rake travis&lt;/code&gt; which is implemented in the &lt;code&gt;Rakefile&lt;/code&gt; file which uses the &lt;code&gt;Gemfile&lt;/code&gt; for ruby library dependencies. So create the files &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;Rakefile&lt;/code&gt; in the root directory of the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;For the above &lt;code&gt;_config.yml&lt;/code&gt; configuration add the following RubyGem dependencies to the &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For &lt;a href=&quot;http://travis-ci.org&quot; title=&quot;Travis CI&quot;&gt;travis&lt;/a&gt; deployment add the following task to the &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env rake&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:travis&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lastly we need to create a &lt;code&gt;bash&lt;/code&gt; script to push the compiled &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll&quot;&gt;jekyll&lt;/a&gt; page to the &lt;code&gt;master&lt;/code&gt; branch. For that authorize &lt;a href=&quot;http://travis-ci.org&quot; title=&quot;Travis CI&quot;&gt;travis&lt;/a&gt; to do commits and pushed as follow:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;curl -X POST -u &amp;lt;your_github_username&amp;gt; -H &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;{\&amp;quot;scopes\&amp;quot;:[\&amp;quot;public_repo\&amp;quot;],\&amp;quot;note\&amp;quot;:\&amp;quot;token for pushing from travis\&amp;quot;}&amp;quot;&lt;/span&gt; https://api.github.com/authorizations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and copy the &lt;code&gt;token&lt;/code&gt; key from the json result.&lt;/p&gt;

&lt;p&gt;Now install the travis gem, encrypt the values of environment variables and add it to the &lt;code&gt;.tavis.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gem install travis
travis encrypt -r &amp;lt;user&amp;gt;/&amp;lt;repository&amp;gt; &lt;span class=&quot;nv&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;token&amp;gt; --add env.global
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lastly you need to create a bash file which pushes the update to he &lt;code&gt;master&lt;/code&gt; branch using the &lt;code&gt;GH_TOKEN&lt;/code&gt; which was encrypted before and need to be registered in the &lt;code&gt;.travis.yml&lt;/code&gt; as &lt;code&gt;after_success&lt;/code&gt; task:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TRAVIS_PULL_REQUEST&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;Starting to update master\n&amp;quot;&lt;/span&gt;

  cp -R _site &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/_site

  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;
  git config --global user.email &lt;span class=&quot;s2&quot;&gt;&amp;quot;iocast@me.com&amp;quot;&lt;/span&gt;
  git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;iocast&amp;quot;&lt;/span&gt;
  git clone --quiet --branch&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;@github.com/iocast/iocast.github.io.git master &amp;gt; /dev/null

  &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;master
  rm -rf ./*
  cp -Rf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/_site/* .

  git add -f .
  git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Travis build $TRAVIS_BUILD_NUMBER pushed to master&amp;quot;&lt;/span&gt;
  git push -fq origin master &amp;gt; /dev/null

  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;Done magic with coverage\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and add the following lines to the end of the &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;./update-gh-pages.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



</content>
    </entry>
    
    
</feed>
