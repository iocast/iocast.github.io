<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>think twice code once!</title>
    <link>http://iocast.github.io/</link>
    <description>Recent content on think twice code once!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved Â© 2017</copyright>
    <lastBuildDate>Sun, 21 Feb 2016 15:22:59 -0500</lastBuildDate>
    <atom:link href="http://iocast.github.io/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Contact</title>
      <link>http://iocast.github.io/contact/</link>
      <pubDate>Sun, 21 Feb 2016 15:22:59 -0500</pubDate>
      
      <guid>http://iocast.github.io/contact/</guid>
      <description><p>adsfdsaf dsaf</p>
</description>
    </item>
    
    <item>
      <title>Bash / Shell</title>
      <link>http://iocast.github.io/cheatsheet/bash/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/bash/</guid>
      <description>

<h2 id="programming-snippets">Programming / Snippets</h2>

<h3 id="arrays">Arrays</h3>

<h4 id="check-string-in-array">check string in array</h4>

<pre><code class="language-bash">...
COMMANDS=(&quot;install&quot; &quot;upgrade&quot;)
command=&quot;install&quot;
...
if ! echo echo ${COMMANDS[@]} | grep -q \\${command}\\b
then
  usage
  exit
fi
...
</code></pre>

<h3 id="platform-detection">Platform Detection</h3>

<pre><code class="language-bash"># Detect the platform (similar to $OSTYPE)
OS=&quot;`uname`&quot;
UNAME=&quot;unknown&quot;
case $OS in
  'Linux')
    OS='linux'
    UNAME='Linux'
    ;;
  'Darwin')
    OS='darwin'
    UNAME='Darwin'
    ;;
  *) ;;
esac
</code></pre>

<h2 id="console-script-handling">Console / Script Handling</h2>

<h3 id="color-and-style-the-console-output">Color and Style the Console Output</h3>

<pre><code class="language-bash"># Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37

GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
...
echo -e &quot;${BLUE}removing node${NC}&quot;
...
</code></pre>

<h3 id="script-parameters">Script Parameters</h3>

<pre><code class="language-bash"># first argument
command=$1
# default value
version=&quot;0.1&quot;

while [ &quot;$2&quot; != &quot;&quot; ]; do
    case $2 in
             --version )    shift
                            version=$2  # set value from input
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done
...
</code></pre>

<p>you can use it like this</p>

<pre><code>./&lt;script&gt; install --version 0.2
</code></pre>

<p>Parameter <code>version</code> is optional because we set a default value for it.</p>

<h3 id="mutliline-output">Mutliline Output</h3>

<pre><code class="language-bash">function usage
{
    cat &lt;&lt; EOF
usage: ${FILENAME%%.*} [$(IFS='|' ; echo &quot;${COMMANDS[*]}&quot;)] [--option value --option etc.]

options:
       --version     value     default version is ${VERSION}
  -h | --help                  this help
EOF
}
</code></pre>
</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://iocast.github.io/cheatsheet/git/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/git/</guid>
      <description>

<pre><code>git submodule update --init
</code></pre>

<h2 id="settings">Settings</h2>

<h3 id="username">Username</h3>

<p>in a local git repo</p>

<pre><code>git config user.name &quot;iocast&quot;
git config user.email &quot;iocast@me.com&quot;
</code></pre>

<p>or for global settings</p>

<pre><code>git config --global user.name &quot;iocast&quot;
git config --global user.email &quot;iocast@me.com&quot;
</code></pre>

<h2 id="general">General</h2>

<p>download from git repository (normally branch &lsquo;master&rsquo;)</p>

<pre><code>git clone &lt;remote_repo&gt;
</code></pre>

<p>download specific branch</p>

<pre><code>git clone -b &lt;branch&gt; &lt;remote_repo&gt;
</code></pre>

<p>commit changes (check if you are on the correct branch)</p>

<pre><code>git commit -m &quot;message&quot;
</code></pre>

<h3 id="push-pull">Push / Pull</h3>

<p>send branch to repository/server</p>

<pre><code>git push origin &lt;branch&gt;
</code></pre>

<p>get branch from repository/server (update)</p>

<pre><code>git pull origin &lt;branch&gt;
</code></pre>

<p>resetting local repository</p>

<pre><code>git reset --hard origin/master
</code></pre>

<h3 id="branching">Branching</h3>

<p>list all branches</p>

<p>Options:</p>

<dl>
<dt><code>-a</code></dt>
<dd><p>lists all branches</p>

<p>git branch [options]</p></dd>
</dl>

<p>create local branch</p>

<pre><code>git branch develop
</code></pre>

<p>delete a branch (origin - server)</p>

<pre><code>git branch -d develop
git push origin --delete develop
</code></pre>

<p>switch branch to work on it</p>

<pre><code>git checkout develop
</code></pre>

<p>push branch to repository/server</p>

<pre><code>git push origin &lt;name&gt;
</code></pre>

<h3 id="tagging">Tagging</h3>

<p>first of all switch to master</p>

<pre><code>git checkout master
</code></pre>

<p>and if necessary merge from a other branch</p>

<pre><code>git merge --no-ff &lt;branch&gt;
</code></pre>

<p>create tag</p>

<pre><code>git tag -a 1.2 -m &quot;message&quot;
</code></pre>

<p>push to repository/server</p>

<pre><code>git push --tags
</code></pre>

<p>list tags</p>

<pre><code>git tag
</code></pre>

<p>change to tag</p>

<pre><code>git checkout &lt;tag&gt;
</code></pre>

<p>or make changes based on this tag (e.g. for hotfixes for this specific tag) where the first argument is the new branch name an the second is the tag name</p>

<pre><code>git checkout -b hotfix-1.3.1 1.3
</code></pre>

<h2 id="release-managment">Release Managment</h2>

<p>assume we are working on branch &lsquo;develop&rsquo; an are ready to create a new release.</p>

<h3 id="releases">Releases</h3>

<h4 id="creating">Creating</h4>

<p>Switched to a new branch &ldquo;release-1.2&rdquo;</p>

<pre><code>git checkout -b release-1.2 develop
</code></pre>

<p>change version number on the notes or other files and commit it</p>

<pre><code>git commit -a -m &quot;Bumped version number to 1.2&quot;
</code></pre>

<h4 id="working">Working</h4>

<p>then modify all files needed for release-1.2 and commit changes (several commits can take place)</p>

<pre><code>git commit -m &quot;message&quot;
</code></pre>

<h4 id="finishing">Finishing</h4>

<p>Now we can finish this release.
Switch to branch &lsquo;master&rsquo;</p>

<pre><code>git checkout master
</code></pre>

<p>merge from the release-1.2 branch and push to repository/server</p>

<pre><code>git merge --no-ff release-1.2
git push origin master
</code></pre>

<p>tag as release in branch master and push tag to repository/server</p>

<pre><code>git tag -a 1.2 -m &quot;message&quot;
git push --tags
</code></pre>

<p>release banch on our local drive is not needed anymore.
Deleted branch release-1.2</p>

<pre><code>git branch -d release-1.2
</code></pre>

<h3 id="hot-fixes">Hot Fixes</h3>

<p>Hot fixes are done from the master (or release) branch.</p>

<h4 id="creating-1">Creating</h4>

<p>Switched to a new branch &ldquo;hotfix-1.2.1&rdquo;</p>

<pre><code>git checkout -b hotfix-1.2.1 master
</code></pre>

<p>change version number on the notes or other files and commit it</p>

<pre><code>git commit -a -m &quot;Bumped version number to 1.2.1&quot;
</code></pre>

<h4 id="working-1">Working</h4>

<p>then modify all files needed files for hotfix-1.21 and commit changes (several commits can take place)</p>

<pre><code>git commit -m &quot;message&quot;
</code></pre>

<h4 id="finishing-1">Finishing</h4>

<p>Switched to branch &lsquo;master&rsquo;</p>

<pre><code>git checkout master
</code></pre>

<p>merge changes</p>

<pre><code>git merge --no-ff hotfix-1.2.1
</code></pre>

<p>tag it and push tag to repository/server</p>

<pre><code>git tag -a 1.2.1 -m &quot;message&quot;
git push --tag
</code></pre>

<p>switch to develop and merge hotfix into it</p>

<pre><code>git checkout develop
git merge --no-ff hotfix-1.2.1
</code></pre>

<p>and delete hotfix</p>

<pre><code>git branch -d hotfix-1.2.1
</code></pre>
</description>
    </item>
    
    <item>
      <title>IRC</title>
      <link>http://iocast.github.io/cheatsheet/irc/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/irc/</guid>
      <description>

<h2 id="user">User</h2>

<h3 id="register">Register</h3>

<pre><code>/msg NickServ register &lt;password&gt; &lt;email&gt;
</code></pre>

<h3 id="login">Login</h3>

<pre><code>/msg nickserv identify &lt;password&gt;
</code></pre>

<h2 id="administering-channel">Administering Channel</h2>

<p>You cannot administer a channel until you become an operator with the op command. Only an operator can create other operators. If no operators are left in a channel, the channel can no longer be administered. You shouldn&rsquo;t be operator any longer than you have to, as it creates an unhelpful class distinction among channel users and not knowing who is operator can help keep trolls from causing trouble. Once you have finished, drop to normal user status with the deop command.</p>

<p>You can see all the flags assigned to all users in a channel with:</p>

<pre><code>/msg chanserv access #&lt;channel&gt; list
</code></pre>

<h3 id="register-a-channel">Register a Channel</h3>

<pre><code>/msg chanserv register #&lt;channel&gt;
</code></pre>

<h3 id="becoming-founder">Becoming Founder</h3>

<pre><code>/msg ChanServ flags #vectorformats iocast +*F
/msg ChanServ flags #vectorformats iocast -OV
</code></pre>

<p>The first command grants all flags to a user, including the founder flag <code>F</code> which must be explicitly granted (it isn&rsquo;t part of the <code>*</code>).</p>

<p>The second command removes two flags which normally should not be used. <code>O</code> automatically makes the user an operator when they join the channel, which should be avoided as previously explained. <code>V</code> automatically voices a user when they join the channel. Voicing is only needed on moderated channels where new users cannot speak upon joining without the voice flag. An open channel for community participation should not require this, and not having the <code>V</code> flag makes it easier to identify a problem with the channel.</p>

<h3 id="becoming-operator">Becoming Operator</h3>

<pre><code>/msg chanserv op #&lt;channel&gt; &lt;username&gt;
/msg chanserv flags #&lt;channel&gt; &lt;username&gt; &lt;flags&gt;
/msg chanserv deop #&lt;channel&gt; &lt;username&gt;
</code></pre>
</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>http://iocast.github.io/cheatsheet/linux/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/linux/</guid>
      <description>

<h2 id="user-group-management">User &amp; Group Management</h2>

<table>
<thead>
<tr>
<th>Purpose</th>
<th>Command</th>
</tr>
</thead>

<tbody>
<tr>
<td>new group</td>
<td><code>groupadd sambashare</code></td>
</tr>

<tr>
<td>new user</td>
<td><code>useradd -m -g users -G sambashare -s /bin/bash unix_user</code></td>
</tr>

<tr>
<td>change password</td>
<td><code>passwd unix_user</code></td>
</tr>

<tr>
<td>rename user</td>
<td><code>usermod -l newUsername oldUsername</code> and change home folder <code>usermod -d /home/newHomeDir -m newUsername</code></td>
</tr>

<tr>
<td>change to root</td>
<td><code>sudo -i</code></td>
</tr>

<tr>
<td>remove user</td>
<td><code>deluser --remove-home username</code></td>
</tr>
</tbody>
</table>

<h3 id="user-with-sudo-rights">User with <code>sudo</code> rights</h3>

<pre><code class="language-bash">useradd --create-home --gid users --shell /bin/bash userName
passwd userName
visudo -f /etc/sudoers.d/sudoers

# User privilege specification
userName    ALL=(ALL:ALL) ALL
</code></pre>

<h2 id="samba-management">Samba Management</h2>

<table>
<thead>
<tr>
<th>Purpose</th>
<th>Command</th>
</tr>
</thead>

<tbody>
<tr>
<td>new user</td>
<td><code>pdbedit -a -u samba_user</code></td>
</tr>

<tr>
<td>change password</td>
<td><code>smbpasswd samba_user</code></td>
</tr>
</tbody>
</table>

<h2 id="file-and-directory-handling">File and Directory Handling</h2>

<h3 id="find-remove">Find &amp; Remove</h3>

<p>specific files</p>

<pre><code>find &lt;path&gt; -name '&lt;file-name&gt;' -delete
</code></pre>

<p>If something &ldquo;more portable&rdquo; needed then you&rsquo;re better off with</p>

<pre><code>find &lt;directory name&gt; -name '*.pyc' -exec rm {} \;
</code></pre>

<h3 id="file-manipulation">File Manipulation</h3>

<p>search the line which begins with <code>var feature server</code> and replaces the whole line with <code>var featureserver = &quot;http://featureserver.org/fs&quot;</code></p>

<pre><code>sed -e 's%^var featureserver.*%var featureserver = &quot;http://featureserver.org/fs&quot;%g' featureserver.org/assets/js/map.js &gt; ${tmp}/website/assets/js/map.js
</code></pre>

<p>template command is as follow, where the first character after <code>s</code> is used as separator and afterwards it comes a regex. Use <code>-i</code> to do an &ldquo;in place&rdquo; replacement (no need for pipe)</p>

<pre><code>sed -ie 's/$search_for/$replace_with/g' $file
</code></pre>

<h3 id="folder-size">Folder size</h3>

<dl>
<dt><code>-h</code></dt>
<dd>human readable file size</dd>
<dt><code>-s</code></dt>
<dd>sum all subfolders</dd>
</dl>

<pre><code class="language-bash">du &lt;directory&gt;
</code></pre>

<h3 id="compression">Compression</h3>

<pre><code>tar -cvzf &lt;file.tar.bz2&gt; --exclude-vcs --exlude='*.svn' folder/
</code></pre>

<h3 id="extraction">Extraction</h3>

<pre><code>tar -zxvf &lt;file.tar.bz2&gt;
</code></pre>

<h3 id="errors">Errors</h3>

<p>When you get a error that the command is not found (e.g. <code>-bash: $'\r': command not found</code>) and you are sure everything is correct, then it has something to do with the file format or the characters.</p>

<p><strong>Error:</strong> <code>-bash: $'\r': command not found</code></p>

<p>Remove trailing \r character that causes this error:</p>

<pre><code class="language-bash">sed -i 's/\r$//' filename
</code></pre>

<p>Option <code>-i</code> is for in-place editing, we delete the trailing <code>\r</code> directly in the input file. Thus be careful to type the pattern correctly.</p>

<h3 id="synchronization">Synchronization</h3>

<p>Synchronization</p>

<pre><code>:::bash
#! /bin/bash
rsync -av --delete &lt;from&gt; &lt;to&gt; &gt; &lt;log&gt; &amp;
</code></pre>

<h3 id="cloning">Cloning</h3>

<p>burning image to disk (also usb drives)</p>

<p>optional use <code>bs=8192</code></p>

<pre><code>dd if=&lt;path&gt;.iso of=&lt;disk&gt;
</code></pre>

<h2 id="job-programs">Job / Programs</h2>

<p>Keep job running despite of a logout</p>

<pre><code>nohup &lt;command&gt; &amp;
</code></pre>

<h2 id="system-information">System information</h2>

<pre><code>dmidecode -t [bios, system, baseboard, chassis, processor, memory, cache, connector, slot] | more
</code></pre>

<h3 id="packages">Packages</h3>

<p>getting installed packages including version number</p>

<pre><code>time dpkg -l | perl -lane 'print &quot;$F[1] : $F[2]&quot; if m/^ii/'
</code></pre>
</description>
    </item>
    
    <item>
      <title>Oracle VirtualBox</title>
      <link>http://iocast.github.io/cheatsheet/virtualbox/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/virtualbox/</guid>
      <description>

<h2 id="virtualbox-management">VirtualBox Management</h2>

<p>This section describes to to use <code>VBoxManage</code></p>

<p>** resizing your virtual disk**</p>

<pre><code>'C:\Program Files\Oracle\VirtualBox\VBoxManage.exe' modifyhd '.\Windows.vdi' --resize 40000
</code></pre>
</description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>http://iocast.github.io/cheatsheet/postgres/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/postgres/</guid>
      <description>

<h2 id="basics">Basics</h2>

<p>login as postgres use r</p>

<pre><code>sudo su postgres -
</code></pre>

<p>run sql command</p>

<pre><code>psql -U postgres -c &quot;&lt;sql&gt;&quot;
</code></pre>

<h3 id="list">List</h3>

<p>lists all databases</p>

<pre><code>psql --list
</code></pre>

<h3 id="create">Create</h3>

<p>create database</p>

<dl>
<dt><code>-O</code></dt>
<dd>owner</dd>
<dt><code>-U</code></dt>
<dd>username</dd>
<dt><code>-E</code></dt>
<dd>encoding</dd>
<dt><code>-e</code></dt>
<dd>echo</dd>
<dt><code>--locale=&lt;locale&gt;</code></dt>
<dd>(This is equivalent to specifying both <code>--lc-collate</code> and <code>--lc-ctype</code>)</dd>
<dt><code>--lc-collate='&lt;locale&gt;'</code></dt>
<dd>collation order</dd>
<dt><code>--lc-ctype='&lt;locale&gt;'</code></dt>
<dd>character classification</dd>
<dt><code>-T</code></dt>
<dd>template</dd>
</dl>

<pre><code class="language-bash">createdb -U postgres &lt;database&gt;
</code></pre>

<h3 id="drop">Drop</h3>

<pre><code>dropdb -U &lt;user&gt; -h &lt;host&gt; -i -e &lt;database&gt;
</code></pre>

<h3 id="log-into-database">Log into database</h3>

<p><code>-W</code> to force password prompt</p>

<pre><code>psql -U &lt;user&gt; -W -d &lt;database&gt;
</code></pre>

<h3 id="user">User</h3>

<p>create user</p>

<dl>
<dt><code>-D</code></dt>
<dd>(The new user will not be allowed to create databases.)</dd>
<dt><code>-P</code></dt>
<dd>(If given, createuser will issue a prompt for the password of the new user. This is not necessary if you do not plan on using password authentication.)</dd>
<dt><code>-S</code></dt>
<dd>(The new user will not be a superuser.)</dd>
<dt><code>-E</code></dt>
<dd>(Encrypts the user&rsquo;s password stored in the database. If not specified, the default password behavior is used.)</dd>
</dl>

<pre><code class="language-bash">createuser -D -S -E -P &lt;name&gt;
</code></pre>

<h3 id="export-to-file">Export To File</h3>

<p><code>\h copy</code> tells you what are the parameters for export</p>

<pre><code>COPY (&lt;sql&gt;) TO '&lt;file&gt;' CSV
</code></pre>

<h2 id="commands">Commands</h2>

<p>load environment</p>

<pre><code>psql
</code></pre>

<p>list all users</p>

<pre><code>\dg
</code></pre>

<p>list all databases</p>

<pre><code>\list
</code></pre>

<p>list all tables</p>

<pre><code>\dp
</code></pre>

<p>table schema</p>

<pre><code>\d &lt;table&gt;
</code></pre>

<p>cancel/go out</p>

<pre><code>CTRL+D
</code></pre>

<h2 id="extensions">Extensions</h2>

<p>Connect to the PostgreSQL server</p>

<pre><code>psql -h localhost
</code></pre>

<p>create a database</p>

<pre><code>CREATE DATABASE mydatabase;
</code></pre>

<p>and connect to it</p>

<pre><code>\c mydatabase
</code></pre>

<h3 id="hstore">Hstore</h3>

<p>creates / loads hstore extension for the current database</p>

<pre><code>CREATE EXTENSION hstore;
</code></pre>

<h3 id="postgis">PostGIS</h3>

<p>creates / load postgis extension for the current database</p>

<pre><code>CREATE EXTENSION postgis;
</code></pre>

<h2 id="sql">SQL</h2>

<p>grant access</p>

<pre><code>ALTER DATABASE &lt;name&gt; OWNER TO &lt;user&gt;
</code></pre>

<h2 id="issues">Issues</h2>

<h3 id="full-disk">Full Disk</h3>

<p>Locate the directory which uses that much space on the disk. On a standard installation it is somewhere in the <code>/var/lib/</code> directory. If found the PostgreSQL data directory (here as example <code>/var/lib/pgsql</code> run the following command to find out which directory needs how much space on the disk</p>

<pre><code>du -h
</code></pre>

<p>First stop PostgreSQL</p>

<pre><code>/etc/init.d/postgresql stop
</code></pre>

<p>Then move a &ldquo;big&rdquo; directory to a partition/disk that has space free.</p>

<pre><code>mv /var/lib/pgsql/main/ /media/tmp/
</code></pre>

<p>Now create a symlink to this directory</p>

<pre><code>ln -s /medai/tmp/main /var/lib/pgsql/main
</code></pre>

<p>Start PostgreSQL</p>

<pre><code>/etc/init.d/postgresql start
</code></pre>

<p>and VACUUM FULL</p>

<pre><code>psql -c &quot;VACUUM FULL&quot;
</code></pre>

<p>Shutdown the database.</p>

<pre><code>/etc/init.d/postgresql stop
</code></pre>

<p>Remove the symbolic link</p>

<pre><code>unlink /var/lib/pgsql/main
</code></pre>

<p>and move the files back onto the <code>/var/lib/pgsql</code> filesystem again</p>

<pre><code>mv /media/tmp/main/ /var/lib/pgsql/
</code></pre>

<p>Now you are finished. Start the database.</p>

<pre><code>/etc/init.d/postgresql start
</code></pre>
</description>
    </item>
    
    <item>
      <title>Python PyPi</title>
      <link>http://iocast.github.io/cheatsheet/python_pypi/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/python_pypi/</guid>
      <description>

<h2 id="comands">Comands</h2>

<h3 id="registration">registration</h3>

<pre><code>python setup.py register
</code></pre>

<h3 id="update">update</h3>

<dl>
<dt><code>bdist</code></dt>
<dd>create a built (binary) distribution<br/></dd>
<dt><code>sdist</code></dt>
<dd>create a source distribution (tarball, zip file, etc.)</dd>
</dl>

<pre><code class="language-bash">python setup.py sdist upload
</code></pre>

<h3 id="configuration-file">configuration file</h3>

<p>is called <code>.pypirc</code>, is located in your home direve <code>~</code> and has the following structure</p>

<pre><code>[distutils]
index-servers =
    pypi
    other

[pypi]
    repository: &lt;repository-url&gt;
    username: &lt;username&gt;
    password: &lt;password&gt;

[other]
    repository: http://example.com/pypi
    username: &lt;username&gt;
    password: &lt;password&gt;
</code></pre>
</description>
    </item>
    
    <item>
      <title>SAP Transactions</title>
      <link>http://iocast.github.io/cheatsheet/sap_transactions/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/sap_transactions/</guid>
      <description>

<h2 id="development">Development</h2>

<table>
<thead>
<tr>
<th>Trx Code</th>
<th>Purpose</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>/h</code></td>
<td>Dynpro debugging</td>
</tr>

<tr>
<td><code>/ha</code></td>
<td>ABAP debugging</td>
</tr>

<tr>
<td><code>/hs</code></td>
<td>System debugging</td>
</tr>

<tr>
<td><code>SAT</code></td>
<td>Profiling</td>
</tr>
</tbody>
</table>

<h2 id="table-management">Table Management</h2>

<table>
<thead>
<tr>
<th>Trx Code</th>
<th>Purpose</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>SM30</code></td>
<td>Table view (customizing / transport )</td>
</tr>

<tr>
<td><code>SE14</code></td>
<td>Delete table entries</td>
</tr>
</tbody>
</table>

<h2 id="services-gateway-odata">Services (Gateway / OData)</h2>

<table>
<thead>
<tr>
<th>Trx Code</th>
<th>Purpose</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>SEGW</code></td>
<td>SAP Gateway Service Builder</td>
</tr>

<tr>
<td><code>/IWFND/ERROR_LOG</code></td>
<td>SAP Gateway Error Log</td>
</tr>

<tr>
<td><code>/IWFND/MAINT_SERVICE</code></td>
<td>Activate and Maintain Services</td>
</tr>

<tr>
<td><code>/IWFND/GW_CLIENT</code></td>
<td>SAP Gateway Client</td>
</tr>

<tr>
<td><code>SXI_MONITOR</code></td>
<td>XI: Message Monitoring</td>
</tr>

<tr>
<td><code>SXMB_MONI</code></td>
<td>Integration Engine - Monitoring</td>
</tr>
</tbody>
</table>

<h3 id="caches">Caches</h3>

<p>Open Transaction <code>SE38</code> and the programming <code>/UI2/INVALIDATE_CLIENT_CACHES</code> for clearing the client caches or <code>/UI2/INVALIDATE_GLOBAL_CACHES</code> for the global UI2 caches.</p>
</description>
    </item>
    
    <item>
      <title>Sphinx</title>
      <link>http://iocast.github.io/cheatsheet/sphinx/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/sphinx/</guid>
      <description>

<h2 id="errors">Errors</h2>

<h3 id="valueerror-unknown-locale-utf-8">ValueError: unknown locale: UTF-8</h3>

<p>If you try to build your documentation (<code>sphinx-build -b html -a . _build/</code>) and get the following error</p>

<pre><code class="language-bash">...
  File &quot;.../virtualenv/publishing/lib/python2.7/locale.py&quot;, line 443, in _parse_localename
    raise ValueError, 'unknown locale: %s' % localename
ValueError: unknown locale: UTF-8
</code></pre>

<p>then try the following. Add the the below lines to your <code>$HOME/.bash_profile</code></p>

<pre><code class="language-bash">export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
</code></pre>

<p>Do</p>

<pre><code class="language-bash">source $HOME/.bash_profile
</code></pre>

<p>and try it again. Or simply export the <strong>locale</strong> settings before running the <code>sphinx-build</code>.</p>
</description>
    </item>
    
    <item>
      <title>Windows general</title>
      <link>http://iocast.github.io/cheatsheet/windows/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/cheatsheet/windows/</guid>
      <description>

<h2 id="desktop">Desktop</h2>

<p>For all the command in this section I used <strong>command line prompt</strong>.</p>

<h3 id="sharing">Sharing</h3>

<p>remove a network share</p>

<pre><code>net use /delete &lt;drive name or network path&gt;
</code></pre>

<h2 id="server">Server</h2>

<p>For all the command below I used <strong>PowerShell</strong>.</p>

<h3 id="sharing-1">Sharing</h3>

<p><strong>list</strong> of all connected users</p>

<pre><code class="language-powershell">Get-SmbSession
</code></pre>

<p>for <strong>command line</strong> use</p>

<pre><code class="language-powershell">net session
</code></pre>

<p><strong>closing</strong> a session can be done using the session id, computer name or user name as follow:</p>

<pre><code class="language-powershell">Close-SmbSession -SessionId 171798691989
Close-SmbSession âClientComputerName \\192.168.0.20
Close-SmbSession âClientUserName Domain\Username
</code></pre>

<h2 id="miscellaneous">Miscellaneous</h2>

<h3 id="synchronization">Synchronization</h3>

<p><strong>mirror</strong></p>

<pre><code class="language-bat">robocopy &lt;source&gt; &lt;destination&gt; /MIR /XD &quot;&lt;source&gt;/&lt;path&gt;/&lt;to&gt;/&lt;folder&gt;&quot;
</code></pre>

<dl>
<dt><code>XD</code></dt>
<dd>exluding directories</dd>
</dl>
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://iocast.github.io/about/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/about/</guid>
      <description>

<h2 id="h2">h2</h2>

<p>text h2</p>

<h3 id="h3">h3</h3>

<p>text h3</p>
</description>
    </item>
    
    <item>
      <title>My personal file server on a Cubox from SolidRun using Arch Linux</title>
      <link>http://iocast.github.io/post/server/cubox-fileserver-archlinux/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/server/cubox-fileserver-archlinux/</guid>
      <description>

<p>For my file server I have the following requirements:</p>

<ol>
<li>it should consume as less as possible electricity</li>
<li>it should be very silent, means no active cooling</li>
<li>the operation system should use OpenSSH</li>
</ol>

<p>Thus, for the hardware I have decided to use a <a href="http://www.solid-run.com/">Cubox from SolidRun</a> because it has a very good value for money. Notice that I use the first revision of the Cubox and not the Cubox-i serie. For the operation system I use <a href="http://archlinuxarm.org/platforms/armv7/marvell/cubox">Arch Linux</a> because it is more up-to-date then the Debian or Ubuntu distribution.</p>

<h1 id="installation">Installation</h1>

<p>Download the latest version of Arch Linux for the <a href="http://archlinuxarm.org/platforms/armv7/marvell/cubox">Marvell ARMv7 platform</a> from the official site. Next, plug your MicroSD into your computer and find out which drive (<code>/dev/sdx</code>) it is</p>

<pre><code class="language-bash">df -ah
</code></pre>

<p>Clear your disk and create <strong>one</strong> <code>ext3</code> partition.</p>

<pre><code class="language-bash">mkfs.ext3 /dev/sdx1
</code></pre>

<p>Know mount it and extract Arch Linux onto your MicroSD partition</p>

<pre><code class="language-bash">mkdir /media/arch
mount /dev/sdx1 /media/arch
tar -xzvf ArchLinuxARM-cubox-latest.tar.gz -C /media/arch
umount /media/arch
rm -rf /media/arch
</code></pre>

<p>The default login is user <code>root</code> with password <code>root</code>.</p>

<h1 id="configuration">Configuration</h1>

<p>Now lets configure some basic stuff, like date and time, DHCP, etc.</p>

<h2 id="network">Network</h2>

<p>Create the <code>/etc/systemd/network/eth0.network</code> file so that it resembles the example below. Be sure to change the IP addresses to reflect the values shown under the âRemote Accessâ tab of the Linode Manager.</p>

<p><strong>for DHCP</strong></p>

<pre><code>[Match]
Name=eth0

[Network]
DHCP=both
</code></pre>

<p><strong>for fixed IP</strong></p>

<pre><code>[Match]
Name=eth0

[Network]
Address=10.0.1.2/24
Gateway=10.0.1.1
</code></pre>

<p>Restart systemd-networkd. To do so, run this command:</p>

<pre><code>systemctl restart systemd-networkd
</code></pre>

<h3 id="clientid">Clientid</h3>

<p>If you are on a network with DHCPv4 that filters Client IDs based on MAC addresses, you may need to change the following line in <code>/etc/dhcpcd.conf</code>:</p>

<pre><code># Use the same DUID + IAID as set in DHCPv6 for DHCPv4 Client ID as per RFC4361.
duid
</code></pre>

<p>to:</p>

<pre><code># Use the hardware address of the interface for the Client ID (DHCPv4).
clientid
</code></pre>

<p>Else, you may not obtain a lease since the DHCP server may not read your DHCPv6-style Client ID correctly. See RFC 4361 for more information.</p>

<p>To automatically start the DCHP daemon at start up you have to enable it.</p>

<pre><code>systemctl enable dhcpcd
</code></pre>

<h2 id="system-upgrade">System Upgrade</h2>

<pre><code>pacman -Syu
</code></pre>

<h2 id="bad-experience-with-vi">Bad experience with <code>vi</code></h2>

<p>If you have bad experience or strange behaviour with the standard <code>vi</code> simply install <code>vim</code>.</p>

<pre><code>pacman -S vim-minimal
</code></pre>

<h2 id="locale-and-date-time">Locale and Date/Time</h2>

<p>Change your timezone to the one your are living at. All time zones can be found in the folder <code>/etc/timezones</code>.</p>

<pre><code># To check the current zone defined for the system:
timedatectl status
# To list available zones:
timedatectl list-timezones
# To change your time zone:
timedatectl set-timezone Europe/Zurich
</code></pre>

<p>Also do not forget to change your <code>locale</code></p>

<pre><code>localectl status
ls /usr/share/i18n/locales
localectl set-locale LANG=de_CH.UTF-8
</code></pre>

<h1 id="samba">Samba</h1>

<p>For internal file sharing you could use Samba. Tips and tricks can be found on <a href="https://wiki.archlinux.org/index.php/Samba/Tips_and_tricks">Arch Linux Samba site</a></p>

<pre><code>pacman -S samba
</code></pre>

<p>Your can restart the service using the follwing</p>

<pre><code>systemctl enable smbd.service
systemctl enable nmbd.service
</code></pre>

<p>Create a new samba group</p>

<pre><code>groupadd sambashare
</code></pre>

<p>and add user to it</p>

<pre><code># add user to the samba grup
pdbedit -a -u samba_user
# changing samba password
smbpasswd samba_user
</code></pre>

<p>Adding a user to the samba group</p>

<pre><code>usermod -a -G sambashare unix_user_name
</code></pre>

<p>On my Cubox I use the following configuration (<code>/etc/samba/smb.conf</code>):</p>

<pre><code>[global]
workgroup = iocast
server string = file server
# Share-level security: Each share in the workgroup has one or more passwords associated with it. Anyone who knows a valid password for the share can access it.
# User-level security: 	Each share in the workgroup is configured to allow access from certain users. With each initial tree connection, the Samba server verifies users and their passwords to allow them access to the share.
# Server-level security: This is the same as user-level security, except that the Samba server uses another server to validate users and their passwords before granting access to the share.
# Domain-level security: Samba becomes a member of a Windows NT domain and uses one of the domain's domain controllersâeither the PDC or a BDCâto perform authentication. Once authenticated, the user is given a special token that allows her access to any share with appropriate access rights. With this token, the domain controller will not have to revalidate the user's password each time she attempts to access another share within the domain. The domain controller can be a Windows NT/2000 PDC or BDC, or Samba acting as a Windows NT PDC.
security = user
map to guest = bad user
create mask = 0775
force create mode = 0775
directory mask = 02775
force directory mode = 02775
force group = sambashare

[share 1]
comment = data disk
path = /storage/data/
public = no
writable = yes
guest ok = no
valid users = user1 user2
write list = user1
read list = user2

[share 1 backup]
comment = data disk backup
path = /storage/backup/
public = no
writable = no
guest ok = no
valid users = user1
write list = user1

[share 2]
comment = data disk1
path = /storage/data1/
public = no
writable = yes
guest ok = no
valid users = user1 user2
write list = user1 user2

[share 2 backup]
comment = data disk1 backup
path = /storage/backup1/
public = no
writable = no
guest ok = no
valid users = user1 user2
write list = user1 user2

[scans]
comment = documents from scanner
path = /storage/scans/
guest ok = yes
guest account = user1
available = yes
browsable = yes
public = yes
writable = yes
</code></pre>

<h1 id="disks-management">Disks management</h1>

<p>To automatically mount disks on startup, you need to add them to the <code>/etc/fstab</code> configuration file. Also use the option <code>nofail</code> to not report any error if the disk is absent. For more information read the <a href="https://wiki.archlinux.org/index.php/fstab">manual on Arch Linux</a></p>

<p>Run <code>lsblk -f</code> or <code>ls -l /dev/disk/by-uuid</code> to list the partitions / disks. Edit the <code>/etc/fstab</code> and prefix the values in the UUID column with <code>UUID=</code>:</p>

<pre><code># &lt;file system&gt;                           &lt;dir&gt;             &lt;type&gt;  &lt;options&gt;                        &lt;dump&gt;  &lt;pass&gt;
UUID=54940062-befb-4127-b1fc-15584cd4c2ea /storage/data/    ext4    nofail,rw,relatime,data=ordered  0       0
UUID=e786913c-ee77-4e04-a0d6-1b70b2b4ff69 /storage/backup/  ext4    nofail,rw,relatime,data=ordered  0       0
UUID=92e833e1-ecc4-4cd3-9874-969867eb5848 /storage/data1/   ext4    nofail,rw,relatime,data=ordered  0       0
UUID=b5a1514e-6a87-4ea5-a3ce-a592a41abecc /storage/backup1/ ext4    nofail,rw,relatime,data=ordered  0       0
</code></pre>

<h1 id="dynamic-dns">Dynamic DNS</h1>

<p>If you use <a href="http://www.afraid.org">afraid.org</a> as your dynamic DNS service you can get an example <code>cron</code> entry from the <strong>Dynamic DNS</strong> menu entry. It look likes the following</p>

<pre><code>PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

3,8,13,18,23,28,33,38,43,48,53,58 * * * * sleep 37 ; wget -O - http://freedns.afraid.org/dynamic/update.php?key= &gt;&gt; /tmp/freedns_pasithee_mooo_com.log 2&gt;&amp;1 &amp;
</code></pre>

<p>On Arch Linux you need to do the following changes to use it with <code>systemd/Timers</code> (see <a href="https://wiki.archlinux.org/index.php/Systemd/Timers">here</a>). First we need to create a new timer <code>vim /etc/systemd/system/afraid.org.timer</code> and add the following lines</p>

<pre><code>[Unit]
Description=timer for service afraid.org.timer
Requires=network-online.target
Requires=network.target
After=dhcpcd.service

[Timer]
OnCalendar=*:3,8,13,18,23,28,33,38,43,48,53,58

[Install]
WantedBy=multi-user.target
</code></pre>

<p>Then create a service file of the same name <code>/etc/systemd/system/afraid.org.service</code> and add the following lines</p>

<pre><code>[Unit]
Description=service for afraid.org for pasithee.mooo.com

[Service]
Type=simple
ExecStart=/usr/bin/curl -k http://freedns.afraid.org/dynamic/update.php?key= &gt;&gt; /tmp/freedns_pasithee_mooo_com.log 2&gt;&amp;1
</code></pre>

<p>Now you can test the service.</p>

<pre><code># test service
systemctl start afraid.org.service
systemctl stop afraid.org.service
</code></pre>

<p>As soon as it works you can enable the timer</p>

<pre><code>systemctl enable afraid.org.timer
systemctl start afraid.org.timer
</code></pre>
</description>
    </item>
    
    <item>
      <title>Javascript localization part 1</title>
      <link>http://iocast.github.io/post/web-application/javascript-internationalization-part1/</link>
      <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/web-application/javascript-internationalization-part1/</guid>
      <description><p>Take some seconds and thing about how you represent a date or number. Do you convert the object to a string and slices it at the needed position? Or do you extend the Date class and adds some new output representation functionality.</p>

<p>Since the ECMA-402 Standard, published on December 2012, you have some really great new functions which respects the locale settings of your environment.</p>

<p>Okey, lets take a step back. When I was working on my semantic web library calendar web component I searched for a way to represent a Date object inside the DOM tree in different way. One question was is how to represent a Date object in the format  <code>mmmm yyyy</code> or <code>mm/dd/yyyy</code>. So I began to search for examples in the web and many entries dated back to 2009, 2010 and 2011. Some of them were also from 2013, which we really astound. Nonetheless, all answers had once thing in common. They put each component of the representation manually inside a string.</p>

<pre><code class="language-javascript">	var dateobj= new Date()
	dateobj.getDate() + &quot;/&quot; + dateobj.getMonth()+1 + &quot;/&quot; + dateobj.getFullYear()
	// 21/7/2014
</code></pre>

<p>or</p>

<pre><code class="language-javascript">	Date.locale = {
		en: {
			month_names: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
			month_names_short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
		}
	};

	Date.prototype.getMonthName = function(lang) {
		lang = lang &amp;&amp; (lang in Date.locale) ? lang : 'en';
		return Date.locale[lang].month_names[this.getMonth()];
	};
	Date.prototype.getMonthNameShort = function(lang) {
		lang = lang &amp;&amp; (lang in Date.locale) ? lang : 'en';
		return Date.locale[lang].month_names_short[this.getMonth()];
	};

	// that can be used as follow:
	var now = new Date();
	now.getMonthNameShort + &quot; &quot; + now.getFullYear();
	// July 2014
</code></pre>

<p>The problem you have with these solutions is that they not respect the language sensitive representation of a Date or Number object.</p>

<p>The solution for this is quite simple. Javascript now provides different functions which respect the locale settings of the environment.</p>

<p>For the <code>Date</code> object now have these functions, whereas I personally prefer the <code>toLocaleString()</code></p>

<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Purpose</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">Date.prototype.toLocaleDateString()</td>
<td align="left">returns a string with a language sensitive representation of the date portion of this date.</td>
</tr>

<tr>
<td align="left">Date.prototype.toLocaleString()</td>
<td align="left">returns a string with a language sensitive representation of this date.</td>
</tr>

<tr>
<td align="left">Date.prototype.toLocaleTimeString()</td>
<td align="left">returns a string with a language sensitive representation of the time portion of this date.</td>
</tr>
</tbody>
</table>

<p>You can use it as follow</p>

<pre><code class="language-javascript">	var now = new Date()
	date.toLocaleString('en', { month: 'long', year: 'numeric' });
	// July 2014
	date.toLocaleString('en', { month: '2-digit', day: '2-digit', year: 'numberic' });
	// 21/07/2014
</code></pre>

<p>where the first parameter is the <code>locale</code> and the second parameter represents the <code>options</code>. The allowed options can be found on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString">Mozilla Developer Network</a>. As you can see in the example the main advantage is that you do need to worry about the representation of the date format in the different languages and that you do not need to add manually a leading zero if necessary.</p>

<p>The same applies to the <code>Number</code> object.</p>

<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Purpose</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">Number.prototype.toLocaleString()</td>
<td align="left">returns a string with a language sensitive representation of this number.</td>
</tr>
</tbody>
</table>

<p>You can use it as follow</p>

<pre><code class="language-javascript">	var number = 3600;
	number.toLocaleString('en');
	// 3,600
	number.toLocaleString('de');
	// 3.600
	number.toLocaleString('en', {
		style: 'currency',
		currency: 'USD'
	});
	// $3,600
</code></pre>
</description>
    </item>
    
    <item>
      <title>GitHub Pages for a repository compiling using Travis CI</title>
      <link>http://iocast.github.io/post/versioning/github-travis-addition/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/versioning/github-travis-addition/</guid>
      <description><p>First of all check if you have already a <strong>personal access token</strong>.</p>

<p><img src="github_personal_access_tokens.png" alt="GitHub personal access tokens" title="GitHub personal access tokens" /></p>

<p>If not, you can follow these <a href="{% post_url 2013-10-08-github-jekyll-travis %}">instructions</a></p>

<p>On Travis we need to grant access to the GitHub repository. Login to Travis and in your account settings under repositories you can enable a project.</p>

<p><img src="travis_grant_repository_access.png" alt="Travis grant access to GitHub repository" title="Travis grant access to GitHub repository" /></p>

<p>The next thing is to generate a new secure string for your <code>.travis.yml</code> file. First we need to get the GitHub personal access token, which you generated beforehand. Run the following command to get a list of all your access tokens.</p>

<pre><code class="language-bash">curl -X GET -u &lt;your_github_username&gt; https://api.github.com/authorizations
</code></pre>

<p>You should get a JSON response which looks like this</p>

<pre><code class="language-json">...
{
	&quot;id&quot;: 1234567,
	&quot;url&quot;: &quot;https://api.github.com/authorizations/1234567&quot;,
	&quot;app&quot;: {
		&quot;name&quot;: &quot;travis: token for pushing from travis (API)&quot;,
		&quot;url&quot;: &quot;http://developer.github.com/v3/oauth_authorizations/&quot;,
		&quot;client_id&quot;: &quot;00000000000000000000&quot;
		},
	&quot;token&quot;: &quot;1abc234d56efghi789&quot;,
	&quot;note&quot;: &quot;travis: token for pushing from travis&quot;,
	&quot;note_url&quot;: null,
	&quot;created_at&quot;: &quot;2014-01-01T12:00:00Z&quot;,
	&quot;updated_at&quot;: &quot;2014-01-01T12:00:00Z&quot;,
	&quot;scopes&quot;: [
		&quot;public_repo&quot;
	]
},
...
</code></pre>

<p>So we are ready to generate the secure string for Travis. Be sure that you have installed <code>travis</code> rubygem using the following command <code>gem install travis</code>. Open a terminal and go to the folder where <code>.travis.yml</code> lays and add the secure string to it</p>

<pre><code class="language-bash">cd /path/to/the/.travsi.yml/file
travis encrypt -r &lt;user&gt;/&lt;repository&gt; GH_TOKEN=&lt;token&gt; --add env.global
</code></pre>

<p>That&rsquo;s all the magic. You are done and can push your changes to the GitHub repository which automatically deploys it on Travis CI.</p>
</description>
    </item>
    
    <item>
      <title>Joining a Active Directory on Linux - the easiest way!</title>
      <link>http://iocast.github.io/post/server-management/linux-join-ad/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/server-management/linux-join-ad/</guid>
      <description>

<p>The easiest way, at least for me, is to use the <code>likewise-open</code> package. You can find the official documentation <a href="https://help.ubuntu.com/community/LikewiseOpen">here</a>. Under Ubuntu you can simple install this package using <code>apt-get</code>.</p>

<pre><code class="language-bash">apt-get install likewise-open
</code></pre>

<p>Once you have installed it, you can join a Active Directory (AD) as follow.</p>

<pre><code class="language-bash">domainjoin-cli join --ou Hosting/&lt;path&gt;/&lt;to&gt;/&lt;your&gt;/&lt;organization-unit&gt; &lt;server&gt; &lt;login-user&gt;
</code></pre>

<p>where you need to define the path to your organization unit, which is displayed in the AD as a folder. The second parameter is the server and the last parameter is the user, that have rights to add new things in the AD.</p>

<p>Without any configuration, all AD users have login rights to your server. At first login, each user is getting a personal user folder under <code>/home/likewise-open</code> and then a subfolder named as his username.</p>

<h2 id="restricting-access-to-specific-groups">Restricting access to specific groups</h2>

<p>By default, LikewiseOpen allows all AD users to logon. To limit this to specific groups you need to add required membership settings as follow:</p>

<pre><code class="language-bash">lwconfig RequireMembershipOf &quot;&lt;server&gt;\\&lt;group-1&gt;&quot; &quot;&lt;erver&gt;\\&lt;group-2&gt;&quot;
lw-update-dns
</code></pre>

<p>If you forget which groups have access to you server, you could check it by running the following command:</p>

<pre><code class="language-bash">lwconfig --detail RequireMembershipOf
</code></pre>

<h2 id="login">Login</h2>

<p>Now you are able to login to your server using active directory authentication:</p>

<pre><code class="language-bash">ssh &lt;ad_domain&gt;\\&lt;user&gt;@&lt;server&gt;
</code></pre>
</description>
    </item>
    
    <item>
      <title>Ubuntu 12.04, PGSQL 9.3, PostGIS 2.1 and PL/R against libgdal1h from scratch</title>
      <link>http://iocast.github.io/post/gis/ubuntu-postgresql-postgis-plr-libgdal1h/</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/gis/ubuntu-postgresql-postgis-plr-libgdal1h/</guid>
      <description>

<h2 id="removing-preinstalled-packages">Removing preinstalled packages</h2>

<p>First we need to check which PostgreSQL, PostGIS and GDAL versions are installed. To do so check your Debian package management system (dpkg).</p>

<pre><code class="language-bash">dpkg -l | grep 'postgres\|gdal'
</code></pre>

<p>You should get a list like the following one:</p>

<pre><code class="language-bash">ii  libgdal-dev                        1.10.0-1~precise1                 Geospatial Data Abstraction Library - Development files
ii  libgdal1-dev                       1.10.0-1~precise1                 Geospatial Data Abstraction Library - Development files
ii  libgdal1h                          1.10.0-1~precise1                 Geospatial Data Abstraction Library
ii  postgresql-9.1                     9.1.10-0ubuntu12.04               object-relational SQL database, version 9.1 server
ii  postgresql-9.1-postgis-2.0         2.0.3-2~precise4                  Geographic objects support for PostgreSQL 9.1
ii  postgresql-9.1-postgis-2.0-scripts 2.0.3-2~precise4                  Geographic objects support for PostgreSQL 9.1 -- scripts
ii  postgresql-client-9.1              9.1.10-0ubuntu12.04               front-end programs for PostgreSQL 9.1
ii  postgresql-client-common           129ubuntu1                        manager for multiple PostgreSQL client versions
ii  postgresql-common                  129ubuntu1                        PostgreSQL database-cluster manager
ii  postgresql-contrib-9.1             9.1.10-0ubuntu12.04               additional facilities for PostgreSQL
</code></pre>

<p>If you want, you could remove these packages as follow:</p>

<pre><code class="language-bash">apt-get purge libgdal-dev libgdal1-dev libgdal1h postgresql-9.1 postgresql-9.1-postgis-2.0 postgresql-9.1-postgis-2.0-scripts postgresql-client-9.1 postgresql-client-common postgresql-common
apt-get autoremove
apt-get autoclean
</code></pre>

<h2 id="installing-postgresql-9-3">Installing PostgreSQL 9.3</h2>

<p>First you need to find out your release code name:</p>

<pre><code class="language-bash">lsb_release -c
</code></pre>

<p>which get you something like that <code>Codename:    precise</code></p>

<p>Create a new file <code>codename-pgdg.list</code> in <code>/etc/apt/sources.list.d</code> according to the <a href="https://wiki.postgresql.org/wiki/Apt" title="Apt - PostgreSQL wiki">PostgreSQL wiki page</a>.</p>

<pre><code class="language-bash">vi /etc/apt/sources.list.d/precise-pgdg.list
</code></pre>

<p>and add the following line</p>

<pre><code class="language-bash">deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main
</code></pre>

<p>Now we need to import the repository key from</p>

<pre><code class="language-bash">wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
</code></pre>

<p>Now we can a update the repository and install the required packages from the PostgreSQL repository.</p>

<pre><code class="language-bash">apt-get update
apt-get install postgresql-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3
</code></pre>

<h2 id="compiling-postgis-2-1-against-libgdal-1-10-0">Compiling PostGIS 2.1 against libgdal &gt;= 1.10.0</h2>

<p>To install PostGIS 2.1 it is important that <code>postgresql-server-dev-x.x</code> is installed, because we need to compile PostGIS against these source files. We are going the install the precompiled <code>libgdal</code> 1.10.0 version from <strong>ubuntugis</strong>.</p>

<p>Install <code>python-software-properties</code> and add the apt sources (repositories):</p>

<pre><code class="language-bash">apt-get install python-software-properties
add-apt-repository ppa:ubuntugis/ubuntugis-unstable
apt-get update
</code></pre>

<p>Now install the new GDAL library called <code>libgdal1h</code> and its&rsquo; development package</p>

<pre><code class="language-bash">apt-get install libgdal1h
apt-cache showpkg libgdal-dev*
</code></pre>

<p>which gets you something like that:</p>

<pre><code class="language-bash">...
Provides:
1.10.0-1~precise1 -
1.9.0-3.1~pgdg12.4+1 -
...
</code></pre>

<p>You can install a version using the <code>-f</code> flag</p>

<pre><code class="language-bash">apt-get install -f libgdal-dev=1.10.0-1~precise1
</code></pre>

<p>Before installing the PostGIS from source we install the required dependencies.</p>

<pre><code class="language-bash">apt-get install make gcc checkinstall libxml2-dev libproj-dev libgeos-dev
</code></pre>

<p>Download the latest PostGIS source and compile it</p>

<pre><code class="language-bash">wget http://download.osgeo.org/postgis/source/postgis-2.1.0.tar.gz
tar xzvf postgis-2.1.0.tar.gz
cd postgis-2.1.0
./configure
</code></pre>

<pre><code class="language-bash"> PostGIS is now configured for x86_64-unknown-linux-gnu

-------------- Compiler Info -------------
 C compiler:           gcc -g -O2
 C++ compiler:         g++ -g -O2
 SQL preprocessor:     /usr/bin/cpp -traditional-cpp -P

-------------- Dependencies --------------
 GEOS config:          /usr/bin/geos-config
 GEOS version:         3.3.8
 GDAL config:          /usr/bin/gdal-config
 GDAL version:         1.10.0
 PostgreSQL config:    /usr/bin/pg_config
 PostgreSQL version:   PostgreSQL 9.3.1
 PROJ4 version:        48
 Libxml2 config:       /usr/bin/xml2-config
 Libxml2 version:      2.8.0
 JSON-C support:       no
 PostGIS debug level:  0
 Perl:                 /usr/bin/perl

--------------- Extensions ---------------
 PostGIS Raster:       enabled
 PostGIS Topology:     enabled
 SFCGAL support:       disabled

-------- Documentation Generation --------
 xsltproc:             
 xsl style sheets:     
 dblatex:              
 convert:              
 mathml2.dtd:          http://www.w3.org/Math/DTD/mathml2/mathml2.dtd
</code></pre>

<p>use <code>checkinstall</code>, which runs <code>make install</code> and registers the package in <code>dpkg</code>.</p>

<pre><code class="language-bash">make
checkinstall
</code></pre>

<h2 id="r-3-0-2-and-pl-r-for-postgresql">R 3.0.2 and PL/R for PostgreSQL</h2>

<p>Before we can install PL/R extension for PostgreSQL 9.3 we need to install R 3.0.2 as describe on the <a href="http://cran.r-project.org" title="The Comprehensive R Archive Network">R-Project</a> site. First edit the</p>

<pre><code class="language-bash">vi /etc/apt/sources.list
</code></pre>

<p>and add the following line and do a update</p>

<pre><code class="language-bash">deb http://cran.r-project.org/bin/linux/ubuntu precise/
</code></pre>

<p>as well as the key</p>

<pre><code class="language-bash">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
apt-get update
</code></pre>

<p>The search for the 3.0.2 R package version and install it.</p>

<pre><code class="language-bash">apt-cache showpkg r-base
apt-get install -f r-base=3.0.2-1precise0
</code></pre>

<p>Lastly we can install the PL/R extension for PostgreSQL from the PostgreSQL apt repository</p>

<pre><code class="language-bash">apt-get install postgresql-9.3-plr
</code></pre>

<p>So &hellip; we are ready &hellip; have fun.</p>
</description>
    </item>
    
    <item>
      <title>Python 2.7.x and mod_wsgi on a CentOS 6</title>
      <link>http://iocast.github.io/post/web-application/centos-python-modwsgi/</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/web-application/centos-python-modwsgi/</guid>
      <description>

<p>When you have installed CentOS 6 using the minimal image we need first to do some preparation. Fist login into your system and enable your <code>eth0</code> at startup.</p>

<pre><code class="language-bash">vi /etc/sysconfig/network-scripts/ifcfg-eth0
</code></pre>

<p>and set <code>ONBOOT</code> to <code>yes</code>.</p>

<h2 id="getting-python-2-7-x">Getting Python 2.7.x</h2>

<p>The following explanations are based on a blog of <a href="http://blog.nickhowell.co.uk/2010/11/30/setup-osqa-on-centos-5-5" title="Setup OSQA on CentOS 5.5 | nickhowell.co.uk">Asim Teeshan</a> and a post on <a href="http://www.fir3net.com/Redhat-/-Fedora/how-do-i-compile-modwgsi-for-python-27.html" title="How do I compile mod_wsgi for Python 2.7">Fire3Net</a>.</p>

<p>First we need some development tools. Install the following once</p>

<pre><code class="language-bash">yum install gcc make zlib-devel bzip2-devel openssl-devel
</code></pre>

<p>Now download the latest 2.7.x Python release and enable shared library during the configuation</p>

<pre><code class="language-bash">cd /opt/
wget http://python.org/ftp/python/2.7.5/Python-2.7.5.tgz
</code></pre>

<p>Extract and install it:</p>

<pre><code class="language-bash">tar -zxvf Python-2.7.5.tgz
cd Python-2.7.5
./configure --enable-shared
make &amp;&amp; make altinstall
</code></pre>

<p>Install Python setuptools for using <code>easy_setup</code></p>

<pre><code class="language-bash">wget http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg
sh setuptools-0.6c11-py2.7.egg
</code></pre>

<p>Before we can install <code>mod_wsgi</code> we need to install the http development libraries</p>

<pre><code class="language-bash">yum install httpd httpd-devel
</code></pre>

<p>Now we are ready to compile <code>mod_wsgi</code> against Python 2.7.x</p>

<p>Download and unpack the latest version</p>

<pre><code class="language-bash">wget http://modwsgi.googlecode.com/files/mod_wsgi-3.4.tar.gz
tar -zxvf mod_wsgi-3.4.tar.gz
cd mod_wsgi-3.4.tar.gz
./configure --with-python=/usr/local/bin/python2.7
</code></pre>

<p>Make sure you specify the path to the python binary. You can find out where your Python binary is by issuing the following command:</p>

<pre><code class="language-bash">whereis python
</code></pre>

<p>Once the configuration completed you can install it:</p>

<pre><code class="language-bash">make &amp;&amp; make install
</code></pre>

<p>If you run into problems along the lines <strong>cannot load shared library libpython2.7&hellip;</strong> then you need run the <code>ldconfig</code> first to tell where the <code>libpython2.7.so*</code> files are:</p>

<pre><code class="language-bash">ln -s /usr/local/lib/libpython2.7.so.1.0 /usr/lib/
ln -s /usr/local/lib/libpython2.7.so /usr/
ldconfig
</code></pre>

<p>Lastly we can install <code>virtualenv</code> as follow:</p>

<pre><code class="language-bash">wget http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz
tar -zxvf virtualenv-1.10.1.tar.gz
cd virtualenv-1.10.1
python2.7 setup.py install
</code></pre>

<p>install psycopg2</p>

<pre><code class="language-bash">wget --no-check-certificate https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.1.tar.gz
tar -zxvf psycopg2-2.5.1.tar.gz
cd psycopg2-2.5.1
vi setup.cfg
</code></pre>

<p>and add the following line</p>

<pre><code>pg_config=/usr/pgsql-9.3/bin/pg_config
</code></pre>

<p>now install it</p>

<pre><code class="language-bash">/usr/local/bin/python2.7 setup.py install
</code></pre>

<p>now creating a virtual env for you web application do it as follow</p>

<pre><code class="language-bash">virtualenv-2.7 --system-site-packages ENV
</code></pre>
</description>
    </item>
    
    <item>
      <title>Setting up a QGIS server and PostGIS on CentOS 6</title>
      <link>http://iocast.github.io/post/gis/qgis-server-centos/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/gis/qgis-server-centos/</guid>
      <description>

<p>QGIS server provides a web map server (WMS) by simply copying a QGIS project int the server directory. If you want to depend on newer <code>postgresql-libs</code> you need first to install the desired version of PostgreSQL and PostGIS as described bellow.</p>

<h2 id="postgresql-and-postgis">PostgreSQL and PostGIS</h2>

<p>The following instructions are adapted from  <a href="http://wiki.postgresql.org/wiki/YUM_Installation#Configure_your_YUM_repository">YUM installation - PostgreSQL wiki</a> and <a href="http://trac.osgeo.org/postgis/wiki/UsersWikiPostGIS20CentOS6pgdg">UsersWikiuPostGIS20CentOS6pgdg - PostGIS</a>.</p>

<h3 id="configuration">Configuration</h3>

<p>Configure yum repository</p>

<pre><code class="language-bash">	vi /etc/yum.repos.d/CentOS-Base.repo
</code></pre>

<p>and add the following excludes to <code>base</code> and <code>updates</code> sections:</p>

<pre><code class="language-yaml">exclude=postgresql*
</code></pre>

<h3 id="install-pgdg-rpm-file">Install PGDG RPM file</h3>

<p>A PGDG file is available for each distribution/architecture/database version combination at <a href="http://yum.postgresql.org">http://yum.postgresql.org</a></p>

<pre><code class="language-bash">	wget http://yum.postgresql.org/&lt;version&gt;/&lt;distribution&gt;/&lt;architecture&gt;/pgdg-&lt;database&gt;.noarch.rpm
</code></pre>

<p>where version is <code>9.3</code>, distribution is <code>redhat</code>, architecture is <code>rhel-6-x86_64</code> and database is <code>centos93-9.3-1</code>.</p>

<p>Install RPM distribution:</p>

<pre><code class="language-bash">	rpm -ivh pgdg-centos93-9.3-1.noarch.rpm
</code></pre>

<h3 id="installation-of-postgresql-and-postgis">Installation of PostgreSQL and PostGIS</h3>

<p>List the available packages:</p>

<pre><code>:::bash
yum list postgres*
</code></pre>

<p>Installation:</p>

<pre><code>:::bash
yum install postgresql93-libs.x86_64 postgresql93-server.x86_64 postgresql93-devel.x86_64 postgis2_93
</code></pre>

<h3 id="configuration-1">Configuration</h3>

<p>Now perform a few post-installation setup commands, in the order: (1) Initialize the database cluster (required), (2) start database (recommended, if you want to use it straight away), (3) allow it to start-up automatically on reboot (recommended):</p>

<pre><code>:::bash
service postgresql-9.3 initdb
service postgresql-9.3 start
chkconfig postgresql-9.3 on
</code></pre>

<p>Some important files</p>

<table>
<thead>
<tr>
<th align="left">File / Application</th>
<th align="left">Purpose</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">/var/lib/pgsql/9.3/data/postgresql.conf</td>
<td align="left">changing host etc.</td>
</tr>

<tr>
<td align="left">/var/lib/pgsql/9.3/data/pg_hba.conf</td>
<td align="left">client authentication configuration</td>
</tr>
</tbody>
</table>

<p>In the <code>pg_hba.conf</code> file comment out the <code>ident</code> lines except for unix domain socket and add two new lines for <code>md5 encryption</code></p>

<pre><code>:::yaml
# IPv4 local connections:
#host    all             all             127.0.0.1/32            ident
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
#host    all             all             ::1/128                 ident
host    all             all             ::1/128                 md5
</code></pre>

<h3 id="database-and-user">Database and User</h3>

<p>Before we can start, we need to create a new database and user.</p>

<p>Login as <code>postgres</code> superuser and create a new database</p>

<pre><code>:::bash
su -l postgres
createdb gis
</code></pre>

<p>Login into the database create a user and set a encrypted password</p>

<pre><code>:::bash
psql gis
CREATE USER gis WITH SUPERUSER LOGIN PASSWORD 'gis';
ALTER USER gis WITH ENCRYPTED PASSWORD 'gis';
</code></pre>

<p>Now test your configuration and install PostGIS extension</p>

<pre><code class="language-bash">psql -h localhost -d gis -U gis -W
CREATE EXTENSION postgis;
</code></pre>

<h2 id="installation-qgis">Installation QGIS</h2>

<p>First you need a running CentOS on a machine. In the default CentOS software repository <code>qgis-server</code> is not available. So you need first to add extra packages for enterprise linux (EPEL) repository as follow:</p>

<pre><code class="language-bash">wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-&lt;version&gt;.noarch.rpm
rpm -Uvh epel-release-&lt;version&gt;.noarch.rpm
</code></pre>

<p>where the version I have tested it was <code>6-8</code>.</p>

<p>Add the ELGIS repositories</p>

<pre><code class="language-bash">wget http://elgis.argeo.org/repos/6/elgis-release-&lt;version&gt;.noarch.rpm
rpm -Uvh elgis-release-6-6_0.noarch.rpm
</code></pre>

<p>where the version I have tested it was <code>6-6_0</code>.</p>

<p>Now install QGIS server:</p>

<pre><code class="language-bash">yum install qgis-mapserver.x86_64
</code></pre>

<p>If you want to have QGIS libraries, QGIS Desktop run the following command</p>

<pre><code class="language-bash">yum install qgis*
</code></pre>

<p>The scripts and configs are installed on CentOS:</p>

<table>
<thead>
<tr>
<th align="left">Script / Config</th>
<th align="left">Purpose</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">/usr/libexec/qgis/qgis_mapserv.fcgi</td>
<td align="left">main fast cgi script (OGC capabilities)</td>
</tr>

<tr>
<td align="left">/etc/httpd/conf.d/qgis-mapserver.conf</td>
<td align="left">qgis mapserver httpd configuration file</td>
</tr>
</tbody>
</table>
</description>
    </item>
    
    <item>
      <title>Mac OS X file server migration</title>
      <link>http://iocast.github.io/post/server-management/osx-file-server-migration/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/server-management/osx-file-server-migration/</guid>
      <description><p>Managing a OS X server is sometimes a pain, when it comes to manage ACL permissions on the file system using OS X Server share point application. For example if you want to migrate from one file server to another you need to define all shares and ACLs again or if you want to propagate permissions on a share with explicit ACLs on a sub-directory you are going to overwrite these explicit ACLs.</p>

<p>So to solve these problems and many more I created a little bash script which is able to:</p>

<ul>
<li>sync files from a remote server using <code>rsync</code></li>
<li>changing the POSIX permissions on the local server after sync</li>
<li>creating optionally a share point for each folder to be synced</li>
<li>propagating ACLs on a share point or on a individual directory.</li>
</ul>

<p>Each of these feature can be used independently. For more information see the project description: <a href="/projects/file-server-management.html">server migration tool</a></p>
</description>
    </item>
    
    <item>
      <title>Creating your own blog using github pages, jekyll and travis</title>
      <link>http://iocast.github.io/post/miscellaneous/github-jekyll-travis/</link>
      <pubDate>Tue, 08 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/miscellaneous/github-jekyll-travis/</guid>
      <description>

<p>Github offers at the time of writing three different types of pages: for <a href="https://help.github.com/articles/user-organization-and-project-pages" title="Github Pages (Help)">users, organizations and projects</a>. For the users and organizations the <code>master</code> branch is going to be used to deploy as static web page. For projects, means in a repository which is not called <code>username.github.io</code>, a subpath of the user pages would be created <code>username.github.io/projectname</code>.</p>

<p>Hence this post is going to discuss the a simple workflow using <a href="http://github.com/" title="Github">Github&rsquo;s</a> user pages, <a href="http://jekyllrb.com" title="Jekyll">jekyll</a> as blog and pseudo dynamic page, <a href="http://travis-ci.org" title="Travis CI">travis</a> as our continuous integration solution for deployment purposes.</p>

<h2 id="github">Github</h2>

<p>First setup a new user page on Github using for example the page generator or simply setting up a new repository called <code>username.github.io</code>. Github will automatically create a new <code>master</code> branch which is used for deploying the content to the web server. In our case, we need to have a separate branch for our blog which is setup using <a href="http://jekyllrb.com" title="Jekyll">jekyll</a>. Therefore create a new branch e.g. called <code>develop</code> as follow</p>

<pre><code class="language-bash"># Creates our branch, without any parents (it's an orphan!)
git checkout --orphan develop
# Remove all files from the old working tree
git rm -rf .

echo &quot;My GitHub Page&quot; &gt; index.html
git add index.html
git commit -a -m &quot;First pages commit&quot;
git push origin develop
</code></pre>

<p>Now we are ready to add our <a href="http://jekyllrb.com" title="Jekyll">jekyll</a> page to this <code>develop</code> branch.</p>

<h2 id="jekyll">Jekyll</h2>

<p>Now that we have a <code>master</code> and <code>develop</code> branch, former for the <a href="http://jekyllrb.com" title="Jekyll">jekyll</a> compilation and later for your source, we can setup our blog. As described in the <a href="http://jekyllrb.com/docs/home/" title="Jekyll Documentation">jekyll documentation</a> we need to have at least a <code>_layouts</code> directory for the templates that wrap posts, a <code>_posts</code> for dynamic content and the rest of html and other files for you layout.</p>

<p>In addition we need to setup a <code>_config.yml</code> file to tell <a href="http://jekyllrb.com" title="Jekyll">jekyll</a> the compilation options. A example could look like the following:</p>

<pre><code>destination: ./_site
lsi:         true
pygments:    true
markdown:    rdiscount
permalink:   date
rdiscount:
  extensions: [smart]

exclude: ['Gemfile', 'Gemfile.lock', 'Rakefile', 'README.md', 'update-gh-pages.sh']
</code></pre>

<h2 id="travis-ci">Travis CI</h2>

<p><a href="http://travis-ci.org" title="Travis CI">Travis</a> is used to automatically deploy the <code>develop</code> branch and push the result of the <code>jekyll build</code> output to the <code>master</code> branch which the would be published to the Github pages.</p>

<p>For that we need first to get <a href="http://travis-ci.org" title="Travis CI">travis</a> access to our Github repository. If you do not have a <a href="http://travis-ci.org" title="Travis CI">travis</a> account register one on the homepage. On The <a href="http://travis-ci.org" title="Travis CI">travis</a> homepage go to the account settings and get access to the appropriate repository like in the image below:</p>

<p><img src="travis_repository_access.png" alt="Travis Repository Access" title="Travis Repository Access" /></p>

<p>The next step is to configure the build process. For that create a new file called <code>.travis.yml</code> in the root directory of the <code>develop</code> branch and add the <code>master</code> branch to the blacklist and the <code>develop</code> branch to the whitelist.</p>

<pre><code>language: ruby
rvm: 1.9.3

branches:
  except:
  - master

branches:
  only:
  - develop

script: rake travis
</code></pre>

<p>As you can see in the <code>.travis.yml</code> file the <a href="http://jekyllrb.com" title="Jekyll">jekyll</a> deployment starts with the command <code>rake travis</code> which is implemented in the <code>Rakefile</code> file which uses the <code>Gemfile</code> for ruby library dependencies. So create the files <code>Gemfile</code> and <code>Rakefile</code> in the root directory of the <code>develop</code> branch.</p>

<p>For the above <code>_config.yml</code> configuration add the following RubyGem dependencies to the <code>Gemfile</code>:</p>

<pre><code class="language-ruby">source 'http://rubygems.org'

gem 'jekyll'
gem 'rdiscount'
gem 'redcarpet'
</code></pre>

<p>For <a href="http://travis-ci.org" title="Travis CI">travis</a> deployment add the following task to the <code>Rakefile</code>:</p>

<pre><code class="language-ruby">	#!/usr/bin/env rake

	task :travis do
	  system(&quot;jekyll build&quot;)
	end
</code></pre>

<p>Lastly we need to create a <code>bash</code> script to push the compiled <a href="http://jekyllrb.com" title="Jekyll">jekyll</a> page to the <code>master</code> branch. For that authorize <a href="http://travis-ci.org" title="Travis CI">travis</a> to do commits and pushed as follow:</p>

<pre><code class="language-bash">	curl -X POST -u &lt;your_github_username&gt; -H &quot;Content-Type: application/json&quot; -d &quot;{\&quot;scopes\&quot;:[\&quot;public_repo\&quot;],\&quot;note\&quot;:\&quot;token for pushing from travis\&quot;}&quot; https://api.github.com/authorizations
</code></pre>

<p>and copy the <code>token</code> key from the json result.</p>

<p>Now install the travis gem, encrypt the values of environment variables and add it to the <code>.tavis.yml</code> file:</p>

<pre><code class="language-bash">gem install travis
travis encrypt -r &lt;user&gt;/&lt;repository&gt; GH_TOKEN=&lt;token&gt; --add env.global
</code></pre>

<p>Lastly you need to create a bash file which pushes the update to he <code>master</code> branch using the <code>GH_TOKEN</code> which was encrypted before and need to be registered in the <code>.travis.yml</code> as <code>after_success</code> task:</p>

<pre><code class="language-bash">if [ &quot;$TRAVIS_PULL_REQUEST&quot; == &quot;false&quot; ]; then
  echo -e &quot;Starting to update master\n&quot;

  cp -R _site $HOME/_site

  cd $HOME
  git config --global user.email &quot;iocast@me.com&quot;
  git config --global user.name &quot;iocast&quot;
  git clone --quiet --branch=master https://${GH_TOKEN}@github.com/iocast/iocast.github.io.git master &gt; /dev/null

  cd master
  rm -rf ./*
  cp -Rf $HOME/_site/* .

  git add -f .
  git commit -m &quot;Travis build $TRAVIS_BUILD_NUMBER pushed to master&quot;
  git push -fq origin master &gt; /dev/null

  echo -e &quot;Done magic with coverage\n&quot;
fi
</code></pre>

<p>and add the following lines to the end of the <code>.travis.yml</code> file:</p>

<pre><code>after_success: ./update-gh-pages.sh
</code></pre>
</description>
    </item>
    
    <item>
      <title>Tunneling over an intermediate to overcome demilitarized zone</title>
      <link>http://iocast.github.io/post/miscellaneous/tunneling-over-an-intermediate/</link>
      <pubDate>Sat, 03 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/miscellaneous/tunneling-over-an-intermediate/</guid>
      <description>

<p>Source code: <a href="resources/code/shell/tunneling.sh">shell script</a></p>

<p>Tunneling over a intermediar is often used to connect to a server which is e.g. in a DMZ. In the following case we have a server that is the company network and does only allow connections on port 22 from the DMZ. Means the server cannot be connection over the internet. In addition, we have a server in the DMZ which allows connection on port 22 from outside (internet) and can connect to the company network over port 22. Last but not least, every time a server restarts we want that the tunnels automatically opens, means that we need to have an <code>cron</code> job that checks, whether an open connection exists from the server to the intermediary or not, and if the server opens a connection to the intermediary the system does not need to prompt for password. Solution is here to register the public key of the server on the intermediary.</p>

<h2 id="client">Client</h2>

<h3 id="opening-a-tunnel-from-client-to-intermediary">Opening a tunnel from client to intermediary</h3>

<pre><code class="language-bash">ssh -L 22000:127.0.0.1:22000 -N root@152.96.56.32
</code></pre>

<h3 id="connecting-to-server">Connecting to server</h3>

<pre><code class="language-bash">ssh -P 22000 michel@127.0.0.1
</code></pre>

<h3 id="copy-files-scp">Copy files (SCP)</h3>

<pre><code class="language-bash">#get
scp -P 22000 michel@127.0.0.1:/home/michel/tunelling.sh /Users/michel/Public/Drop\ Box/

#put
scp /Users/michel/Public/Drop\ Box/tunelling.sh -P 22000 michel@127.0.0.1:/home/michel/
</code></pre>

<h2 id="intermediary">Intermediary</h2>

<h3 id="register-gpg-key-from-server">Register GPG key from server</h3>

<pre><code class="language-bash">apt-key add &lt;file&gt;
</code></pre>

<h2 id="server">Server</h2>

<h3 id="export-gpg-key">Export GPG key</h3>

<pre><code class="language-bash">apt-key export &lt;key&gt; &gt; &lt;file&gt;
</code></pre>

<h3 id="open-a-connection-to-intermediary-from-server">Open a connection to intermediary from server</h3>

<p>Save the following script as e.g. tunneling.sh</p>

<pre><code class="language-bash">#!/bin/sh

cmd=&quot;ssh -R 22000:127.0.0.1:22 -N root@152.96.56.32&quot;

match=$(ps -aef | grep &quot;${cmd}&quot; | grep -v grep)
if [ -z &quot;${match}&quot; ] ; then
$cmd &amp;
fi
</code></pre>

<h3 id="register-cron-job">Register cron job</h3>

<p>Edit crontab</p>

<pre><code class="language-bash">crontab -e
</code></pre>

<p>Adding a new job to the crontab. The following entry executes the defined script <code>tunneling.sh</code> every 5 minutes.</p>

<pre><code class="language-bash">5 * * * * /&lt;path&gt;/tunnelilng.sh
</code></pre>

<p>Crontab is structured as follow:</p>

<pre><code class="language-bash">* * * * * command to be executed
- - - - -
| | | | |
| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
| | | ------- Month (1 - 12)
| | --------- Day of month (1 - 31)
| ----------- Hour (0 - 23)
------------- Minute (0 - 59)
</code></pre>
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://iocast.github.io/post/sapui5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/sapui5/</guid>
      <description>

<h1 id="sapui5-cheatsheet">SAPUI5 - CHEATSHEET</h1>

<h2 id="content">Content</h2>

<p><a href="#initialize">Initialize Project (WebIDE)</a><br />
<a href="#router">Router</a><br />
<a href="#jsonmodel">JSONModel</a><br />
<a href="#jsfragment">JS-Fragment</a><br />
<a href="#xmlfragment">XML-Fragment</a><br />
<a href="#xmlview">XML-View</a><br />
<a href="#viewcontroller">View-Controller</a><br />
<a href="#vizchart">Chart&rsquo;s</a><br />
<a href="#html">HTML in XML View</a><br />
<a href="#css">CSS</a><br />
<a href="#i18n">i18n</a><br />
<a href="#externallibrary">External JS Library use</a><br />
<a href="#usefullinks">Useful Links</a></p>

<h3 id="a-name-initialize-a-initialize-project-webide"><a name="initialize"></a> Initialize Project (WebIDE)</h3>

<p>To make a project in SAP WebIDE follow this steps:
1. Rightclick on folder <strong>Workspace</strong>
2. New &gt; Project from Template
3. Select <strong>SAPUI5 Application</strong>
4. Give a project name and go to next page (do not finish!)
5. Select yout view type and give a view name (like <strong>Main</strong>)
6. Finish setup</p>

<p>An folder with your project name is generated and you can start coding!</p>

<h3 id="a-name-router-a-router"><a name="router"></a> Router</h3>

<p>Setup the router in your first called View-Controller in onInit() function.
For setting up the router, use following code:</p>

<p>XML:</p>

<pre><code class="language-xml">&lt;mvc:View xmlns:core=&quot;sap.ui.core&quot; xmlns:mvc=&quot;sap.ui.core.mvc&quot; xmlns=&quot;sap.m&quot; controllerName=&quot;Test.controller.Main&quot;
			xmlns:html=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
	&lt;Page showHeader=&quot;false&quot;&gt;
		&lt;content&gt;
			&lt;!-- Create nav container for all the views --&gt;
			&lt;NavContainer id=&quot;navContainer&quot; /&gt;
		&lt;/content&gt;
	&lt;/Page&gt;
&lt;/mvc:View&gt;
</code></pre>

<p>JavaScript:</p>

<pre><code class="language-javascript">var oRouter = new sap.ui.core.routing.Router({
    main: {
        pattern : &quot;main&quot;,
        view    : &quot;Main&quot;
    },
    product: {
        pattern : &quot;product/{id}&quot;,
        view    : &quot;Product&quot;
    }
}, {
    targetControl       : &quot;navContainer&quot;, // container id of element, where the pages will be showed
    targetAggregation   : &quot;pages&quot;, // type of used aggregation
    targetParent        : &quot;idApp&quot;, // id of App (See index.html and give id)
    viewType            : &quot;XML&quot;, // type of view
    viewPath            : &quot;Test.view&quot; // Place, where the views are
});

new sap.m.routing.RouteMatchedHandler(oRouter, false); // set the route handler
oRouter.register(&quot;router&quot;); // register the router with name
oRouter.initialize(); // initialize the router
this._oRouter = oRouter; // set the content of attribute _oRouter
</code></pre>

<p>After this, your Router is functional!</p>

<p>Notice: In the other views, if you want the parameters (here by product, the parameter <strong>id</strong>), you have to get the router in Controllers onInit function, as following:</p>

<pre><code class="language-javascript">this._oRouter = sap.ui.core.routing.Router.getRouter(&quot;router&quot;); // get router by registered router name
this._oRouter.attachRouteMatched(function(oEvent) { // annonymous function by match
    if(oEvent.getParameter(&quot;name&quot;) === &quot;product&quot;) { // check for correct route
        var parameters = oEvent.getParameter(&quot;arguments&quot;); // give you an json of the parameters, so you can easy access by name
        var id = parameters.id; // return id as string

        // do something with the id
    }
});
</code></pre>

<p>Now we can access, but how do we navigate?<br />
Navigate to view without parameter:</p>

<pre><code class="language-javascript">this._oRouter = sap.ui.core.routing.Router.getRouter(&quot;router&quot;); // get router by registered router name
this._oRouter.navTo(&quot;main&quot;); // Navigate to &quot;Main&quot;
</code></pre>

<p>Navigate to view with parameter:</p>

<pre><code class="language-javascript">this._oRouter = sap.ui.core.routing.Router.getRouter(&quot;router&quot;); // get router by registered router name
this._oRouter.navTo(&quot;product&quot;, {id: 12}); // navigate to &quot;Product&quot; with parameter as JSON! Key see in routing initialization
</code></pre>

<h3 id="a-name-jsonmodel-a-jsonmodel"><a name="jsonmodel"></a> JSONModel</h3>

<p>To initialize a JSONModel, you use the following code:</p>

<pre><code class="language-javascript">var oModel = new sap.ui.model.json.JSONModel();
oModel.setData({&quot;entry&quot;:[]}); // set data by direct input
// oModel.loadData(&quot;resources/content.json&quot;, {}, false); // Load data from external json
oModel.setDefaultBindingMode(&quot;OneWay&quot;);

// bind model to view
this.getView().setModel(oModel, &quot;ModelOnView&quot;);

// bind model to core (not recommend)
sap.ui.getCore().setModel(oModel, &quot;ModelOnCore&quot;)
</code></pre>

<h3 id="a-name-jsfragment-a-js-fragment-basic"><a name="jsfragment"></a> JS-Fragment (Basic)</h3>

<h3 id="a-name-xmlfragment-a-xml-fragment-basic"><a name="xmlfragment"></a> XML-Fragment (Basic)</h3>

<h3 id="a-name-xmlview-a-xml-view"><a name="xmlview"></a> XML View</h3>

<p>The inital page will be look like this:</p>

<pre><code class="language-xml">&lt;mvc:View controllerName=&quot;Test.controller.Main&quot; xmlns:html=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:mvc=&quot;sap.ui.core.mvc&quot; xmlns=&quot;sap.m&quot;&gt;
	&lt;App&gt;
		&lt;pages&gt;
			&lt;Page title=&quot;{i18n&gt;title}&quot;&gt;
				&lt;content&gt;&lt;/content&gt;
			&lt;/Page&gt;
		&lt;/pages&gt;
	&lt;/App&gt;
&lt;/mvc:View&gt;
</code></pre>

<p>This will show an empty page with the title <strong>Title</strong> that will be show the title from i18n.
An important point is the mvc:View tag <strong>controllerName</strong> that say, where your controller is.</p>

<p>In the <strong>content</strong>-tag you can put your content. For a list of all UI-Components see <a href="https://sapui5.hana.ondemand.com/sdk/explored.html">here</a>.</p>

<h3 id="a-name-viewcontroller-a-view-controller"><a name="viewcontroller"></a> View-Controller</h3>

<p>When you create an View, you also will get a empty View-Controller named <strong><View-Name>.controller.js</strong>.<br />
This controller have functions, that will be called automatically. These functions are:</p>

<p>|function|Call time|
|:-|:-|
|onInit()           | called once by initializing the view by system    |
|onAfterRendering() | called when view is fully rendered                |
|onBeforeRendering()| called before view will be rendered               |
|onExit()           | called before exit the view                       |</p>

<h3 id="a-name-vizchart-a-chart-s-vizframe"><a name="vizchart"></a> Chart&rsquo;s (VizFrame)</h3>

<p>For using a Viz-Frame, generate an Content holder in the XML-View:</p>

<pre><code class="language-xml">&lt;mvc:View controllerName=&quot;Test.controller.Main&quot; xmlns:html=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:mvc=&quot;sap.ui.core.mvc&quot; xmlns=&quot;sap.m&quot; xmlns:viz=&quot;sap.viz.ui5.controls&quot;&gt;
	&lt;App&gt;
		&lt;pages&gt;
			&lt;Page id=&quot;main&quot; title=&quot;{i18n&gt;title}&quot;&gt;
				&lt;content&gt;
				    &lt;viz:VizFrame id=&quot;chart&quot; width=&quot;100%&quot;/&gt;
				&lt;/content&gt;
			&lt;/Page&gt;
		&lt;/pages&gt;
	&lt;/App&gt;
&lt;/mvc:View&gt;
</code></pre>

<p>Now in your onBeforeRendering function you can create the chart. Code sample for pie-chart:</p>

<pre><code class="language-javascript">sap.ui.define([
	&quot;sap/ui/core/mvc/Controller&quot;
], function(Controller) {
	&quot;use strict&quot;;

	return Controller.extend(&quot;Test.controller.Main&quot;, {
        onBeforeRendering: function() {
            var data = {&quot;entry&quot;:[ // PIE Chart data
                {&quot;year&quot;:2016, &quot;revenue&quot;:12000.43},
                {&quot;year&quot;:2015, &quot;revenue&quot;:9800.55},
                {&quot;year&quot;:2014, &quot;revenue&quot;:24231.33},
                {&quot;year&quot;:2013, &quot;revenue&quot;:13337.67},
                {&quot;year&quot;:2012, &quot;revenue&quot;:5299.00},
                {&quot;year&quot;:2011, &quot;revenue&quot;:4100.10},
                {&quot;year&quot;:2010, &quot;revenue&quot;:2154.34}
            ]};

            var oModel = new sap.ui.model.json.JSONModel(data); // Create JSONModel

            var chart = this.getView().byId(&quot;chart&quot;); // Get chart
            chart.removeAllFeeds(); // remove the feeds

            chart.setModel(oModel); // add the JSONModel to chart
            chart.setVizProperties({&quot;title&quot;:{&quot;text&quot;:&quot;My awesome pie chart!&quot;}}); // Set the properties

            var pieSettings = { // Settings of cahrt
                path: &quot;/entry&quot;,
                dimensions: [{
					name: &quot;Year&quot;,
					value: &quot;{year}&quot;
				}],
				measures: [{
					name: &quot;Revenue&quot;,
					value: &quot;{revenue}&quot;
				}],
				color: {
					uid: &quot;color&quot;,
					type: &quot;Dimension&quot;,
					values: [&quot;Year&quot;]
				},
				size: {
					uid: &quot;size&quot;,
					type: &quot;Measure&quot;,
					values: [&quot;Revenue&quot;]
				}
            };
            var pieDataset = new sap.viz.ui5.data.FlattenedDataset({ // Dataset of PIE Chart
				dimensions: pieSettings.dimensions,
				measures: pieSettings.measures,
				data: {
					path: pieSettings.path
				}
			});
			chart.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem(pieSettings.size));
        	chart.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem(pieSettings.color));

            chart.setVizType(&quot;pie&quot;);
            chart.setDataset(pieDataset);
        }
	});

});
</code></pre>

<p>NOTICE: The feeds are different by different vizTypes. See <a href="https://sapui5.hana.ondemand.com/docs/vizdocs/index.html#reference/chartProperty/Charts">here</a>, click on VizType, go on tab <strong>Bindings</strong> and fill Feeds with min 1!</p>

<h3 id="a-name-html-a-html-in-xml-view"><a name="html"></a> HTML in XML View</h3>

<p>To use native HTML, SAPUI5 is giving you an simple way. Example:</p>

<pre><code class="language-xml">&lt;mvc:View controllerName=&quot;Test.controller.Main&quot; xmlns:html=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:mvc=&quot;sap.ui.core.mvc&quot; xmlns=&quot;sap.m&quot;&gt;
	&lt;App&gt;
		&lt;pages&gt;
			&lt;Page id=&quot;main&quot; title=&quot;{i18n&gt;title}&quot;&gt;
				&lt;content&gt;
				    &lt;html:Input type=&quot;checkbox&quot; id=&quot;check&quot; name=&quot;check&quot;&gt;&lt;/html:Input&gt;
				    &lt;html:Label for=&quot;check&quot;&gt;I'm a HTML Checkbox&lt;/html:Label&gt;
				&lt;/content&gt;
			&lt;/Page&gt;
		&lt;/pages&gt;
	&lt;/App&gt;
&lt;/mvc:View&gt;
</code></pre>

<h3 id="a-name-css-a-css"><a name="css"></a> CSS</h3>

<p>To use CSS, the WebIDE will generate you a folder named <strong>css</strong> with a file <strong>style.css</strong>. You can simply put your css in here.</p>

<p>If you are using an older version of a project, you can create the folder and file yourself and make a css reference in <strong>index.html</strong> of the project. See here:</p>

<pre><code class="language-html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot;&gt;
</code></pre>

<p>Now you have two ways to access your css.</p>

<p>First way: Set class like in HTML</p>

<pre><code class="language-xml">&lt;Panel headerText=&quot;{i18n&gt;title}&quot; id=&quot;title&quot; class=&quot;your_style_class&quot;&gt;
	&lt;content/&gt;
&lt;/Panel&gt;
</code></pre>

<p>Second way: Add style class with JavaScript</p>

<pre><code class="language-javascript">// Access your element and set style class
this.getView().byId(&quot;element_id&quot;).addStyleClass(&quot;your_style_class&quot;);

// Remove class from element
this.getView().byId(&quot;element_id&quot;).removeStyleClass(&quot;your_style_class&quot;);
</code></pre>

<h3 id="a-name-i18n-a-i18n"><a name="i18n"></a> i18n</h3>

<p>If you don&rsquo;t know what i18n is, see <a href="https://en.wikipedia.org/wiki/Internationalization_and_localization">here</a>.<br />
By basic generation, WebIDE will give you the possibility to easy access to i18n!</p>

<p>The settings are in the file <strong>.project.json</strong>. In section <strong>translation</strong> you find the information. Set here your supported languages iso-code and the default language.</p>

<pre><code class="language-json">&quot;translation&quot;: {
    &quot;translationDomain&quot;: &quot;&quot;,
    &quot;supportedLanguages&quot;: &quot;en,fr,de&quot;,
    &quot;defaultLanguage&quot;: &quot;en&quot;,
    &quot;defaultI18NPropertyFile&quot;: &quot;i18n.properties&quot;,
    &quot;resourceModelName&quot;: &quot;i18n&quot;
}
</code></pre>

<p>WebIDE is generating you a file <strong>i18n.properties</strong> in folder <strong>i18n</strong>. This file is used for language, when no other file is found for local language of current user.</p>

<p>SAPUI5 is giving you a naming syntax for file.<br />
So if you want to make a file for english, generate file <strong>i18n_en.properties</strong> in the folder. For german use <strong>i18n_de.properties</strong> and so on.<br />
Fill the files with content, and only change the content after <strong>&rsquo;=&rsquo;</strong>. The key has to be the same on all files!</p>

<p>Now if you change your browser language, you will see the website i18n content with the text in file.</p>

<h3 id="a-name-externallibrary-a-external-js-library-use-example-google-maps-api"><a name="externallibrary"></a> External JS Library use (Example: Google Maps API)</h3>

<h3 id="a-name-usefullinks-a-useful-links"><a name="usefullinks"></a> Useful Links</h3>

<p><a href="https://sapui5.netweaver.ondemand.com/#docs/api/symbols/sap.ui.html">API SAPUI5</a><br />
<a href="https://sapui5.hana.ondemand.com/sdk/explored.html">SAPUI5 Explored (XML UI Elements)</a><br />
<a href="https://openui5.hana.ondemand.com/iconExplorer.html">SAPUI5 Icon Explorer</a><br />
<a href="https://sapui5.hana.ondemand.com/docs/vizdocs/index.html#reference/chartProperty/Charts">VizFrame Chart Settings</a></p>
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://iocast.github.io/post/odata-bpm-ui5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/odata-bpm-ui5/</guid>
      <description><p><a href="http://sappo2.aads.ktag.ch:50000/bpmodata/index.html">http://sappo2.aads.ktag.ch:50000/bpmodata/index.html</a></p>

<p>odata services</p>
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://iocast.github.io/post/webdynpro-java-2015-11.05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://iocast.github.io/post/webdynpro-java-2015-11.05/</guid>
      <description>

<h2 id="url-parameters-and-application-parameters">URL Parameters and Application Parameters</h2>

<p>source: <a href="http://help.sap.com/saphelp_nw70ehp1/helpdata/en/7b/fb57412df8091de10000000a155106/content.htm">http://help.sap.com/saphelp_nw70ehp1/helpdata/en/7b/fb57412df8091de10000000a155106/content.htm</a></p>

<pre><code class="language-curl">&lt;schema&gt;://&lt;host&gt;.&lt;domain&gt;.&lt;extension&gt;:&lt;port&gt;/sap/bc/webdynpro/&lt;namespace&gt;/&lt;application name&gt;?&lt;parameter name&gt;=&lt;parameter value&gt;
</code></pre>

<p>eg</p>

<pre><code class="language-curl">http://us7211.wdf.sap.corp:50021/sap/bc/webdynpro/sap/demo_table?sap-language=EN
</code></pre>

<p>The parameter names are not case sensitive, nor are the parameter values (exception: sap-exiturl, if it is pointed to a case-sensitive server). You can combine several parameters in one URL.</p>

<h2 id="using-parameters-to-call-a-web-dynpro-application">Using Parameters to Call a Web Dynpro Application</h2>

<p>The URL parameters of a Web Dynpro application are defined by the main component.</p>

<p>The window of a component has one or more inbound plugs, and these may have parameters. If a parameter is defined for an inbound plug, it must be assigned a value at runtime. Usually the URL call will transfer the parameter value to the inbound plug. Alternatively, you can set a default value for this parameter in the <code>Web Dynpro Explorer: Display Application</code>. This will be overwritten at runtime by the value of the URL parameter. If a default parameter is defined in the application, the value is optional.</p>

<h3 id="procedure">Procedure</h3>

<ol>
<li><p>In the component, switch to the window editor. Here you can change the predefined inbound plug, or create a new inbound plug.</p>

<ol>
<li>Specify the plug as a startup plug (Startup).</li>
<li>The data type should be string since as yet the data cannot be converted or checked.</li>
<li>Activate the component.</li>
</ol></li>

<li><p>In the application specify the component to be called, the window, and the startup plug. You can now specify the parameters.
Apart from the default parameters, the startup plug parameters are also available and can be assigned a default value. If no default value is assigned, the parameters have to be specified as URL parameters when the application is called.</p></li>

<li><p>Start the application.
The URL parameter overwrites the application parameter.</p></li>
</ol>

<p><a href="http://sappo2.ktag.ch:50000/webdynpro/resources/ag.ch/ui~eep~test/TestApp?SAPtestId=0#">http://sappo2.ktag.ch:50000/webdynpro/resources/ag.ch/ui~eep~test/TestApp?SAPtestId=0#</a></p>

<p><a href="http://sappo2.ktag.ch:50000/webdynpro/resources/ag.ch/ui~eep~gesuch/EEPDirectApp?gesuchID=EEPO-7687-3297&amp;tab=tCommune+tPrecheck">http://sappo2.ktag.ch:50000/webdynpro/resources/ag.ch/ui~eep~gesuch/EEPDirectApp?gesuchID=EEPO-7687-3297&amp;tab=tCommune+tPrecheck</a></p>

<h1 id="debugging">debugging</h1>

<p><a href="http://www.hcc.in.tum.de/saphelp/nw731/PLAINHTM/DE/47/e0e79f372301cee10000000a421937/frameset.htm">http://www.hcc.in.tum.de/saphelp/nw731/PLAINHTM/DE/47/e0e79f372301cee10000000a421937/frameset.htm</a></p>

<p><a href="http://www.hcc.in.tum.de/saphelp/nw731/PLAINHTM/DE/4a/38f6c292a81c62e10000000a42189c/frameset.htm">http://www.hcc.in.tum.de/saphelp/nw731/PLAINHTM/DE/4a/38f6c292a81c62e10000000a42189c/frameset.htm</a></p>
</description>
    </item>
    
  </channel>
</rss>