<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[My personal file server on a Cubox from SolidRun using Arch Linux]]></title>
      <url>http://iocast.github.io/en/2014/11/09/server/cubox-fileserver-archlinux.html</url>
      <content type="html"><![CDATA[<p>For my file server I have the following requirements:</p>
<ol>
<li>it should consume as less as possible electricity</li>
<li>it should be very silent, means no active cooling</li>
<li>the operation system should use OpenSSH</li>
</ol>
<p>Thus, for the hardware I have decided to use a <a href="http://www.solid-run.com/" target="_blank" rel="external">Cubox from SolidRun</a> because it has a very good value for money. Notice that I use the first revision of the Cubox and not the Cubox-i serie. For the operation system I use <a href="http://archlinuxarm.org/platforms/armv7/marvell/cubox" target="_blank" rel="external">Arch Linux</a> because it is more up-to-date then the Debian or Ubuntu distribution.</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Download the latest version of Arch Linux for the <a href="http://archlinuxarm.org/platforms/armv7/marvell/cubox" target="_blank" rel="external">Marvell ARMv7 platform</a> from the official site. Next, plug your MicroSD into your computer and find out which drive (<code>/dev/sdx</code>) it is</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">df -ah</div></pre></td></tr></table></figure>
<p>Clear your disk and create <strong>one</strong> <code>ext3</code> partition.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mkfs.ext3 /dev/sdx1</div></pre></td></tr></table></figure>
<p>Know mount it and extract Arch Linux onto your MicroSD partition</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mkdir /media/arch</div><div class="line">mount /dev/sdx1 /media/arch</div><div class="line">tar -xzvf ArchLinuxARM-cubox-latest.tar.gz -C /media/arch</div><div class="line">umount /media/arch</div><div class="line">rm -rf /media/arch</div></pre></td></tr></table></figure>
<p>The default login is user <code>root</code> with password <code>root</code>.</p>
<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>Now lets configure some basic stuff, like date and time, DHCP, etc.</p>
<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>Create the <code>/etc/systemd/network/eth0.network</code> file so that it resembles the example below. Be sure to change the IP addresses to reflect the values shown under the “Remote Access” tab of the Linode Manager.</p>
<p><strong>for DHCP</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Match]</div><div class="line">Name=eth0</div><div class="line"></div><div class="line">[Network]</div><div class="line">DHCP=both</div></pre></td></tr></table></figure>
<p><strong>for fixed IP</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Match]</div><div class="line">Name=eth0</div><div class="line"></div><div class="line">[Network]</div><div class="line">Address=10.0.1.2/24</div><div class="line">Gateway=10.0.1.1</div></pre></td></tr></table></figure>
<p>Restart systemd-networkd. To do so, run this command:</p>
<pre><code>systemctl restart systemd-networkd
</code></pre><h3 id="Clientid"><a href="#Clientid" class="headerlink" title="Clientid"></a>Clientid</h3><p>If you are on a network with DHCPv4 that filters Client IDs based on MAC addresses, you may need to change the following line in <code>/etc/dhcpcd.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Use the same DUID + IAID as set in DHCPv6 for DHCPv4 Client ID as per RFC4361.</div><div class="line">duid</div></pre></td></tr></table></figure>
<p>to:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Use the hardware address of the interface for the Client ID (DHCPv4).</div><div class="line">clientid</div></pre></td></tr></table></figure>
<p>Else, you may not obtain a lease since the DHCP server may not read your DHCPv6-style Client ID correctly. See RFC 4361 for more information.</p>
<p>To automatically start the DCHP daemon at start up you have to enable it.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">systemctl enable dhcpcd</div></pre></td></tr></table></figure>
<h2 id="System-Upgrade"><a href="#System-Upgrade" class="headerlink" title="System Upgrade"></a>System Upgrade</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pacman -Syu</div></pre></td></tr></table></figure>
<h2 id="Bad-experience-with-vi"><a href="#Bad-experience-with-vi" class="headerlink" title="Bad experience with vi"></a>Bad experience with <code>vi</code></h2><p>If you have bad experience or strange behaviour with the standard <code>vi</code> simply install <code>vim</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pacman -S vim-minimal</div></pre></td></tr></table></figure>
<h2 id="Locale-and-Date-Time"><a href="#Locale-and-Date-Time" class="headerlink" title="Locale and Date/Time"></a>Locale and Date/Time</h2><p>Change your timezone to the one your are living at. All time zones can be found in the folder <code>/etc/timezones</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># To check the current zone defined for the system:</div><div class="line">timedatectl status</div><div class="line"># To list available zones:</div><div class="line">timedatectl list-timezones</div><div class="line"># To change your time zone:</div><div class="line">timedatectl set-timezone Europe/Zurich</div></pre></td></tr></table></figure>
<p>Also do not forget to change your <code>locale</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">localectl status</div><div class="line">ls /usr/share/i18n/locales</div><div class="line">localectl set-locale LANG=de_CH.UTF-8</div></pre></td></tr></table></figure>
<h1 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h1><p>For internal file sharing you could use Samba. Tips and tricks can be found on <a href="https://wiki.archlinux.org/index.php/Samba/Tips_and_tricks" target="_blank" rel="external">Arch Linux Samba site</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pacman -S samba</div></pre></td></tr></table></figure>
<p>Your can restart the service using the follwing</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">systemctl enable smbd.service</div><div class="line">systemctl enable nmbd.service</div></pre></td></tr></table></figure>
<p>Create a new samba group</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">groupadd sambashare</div></pre></td></tr></table></figure>
<p>and add user to it</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># add user to the samba grup</div><div class="line">pdbedit -a -u samba_user</div><div class="line"># changing samba password</div><div class="line">smbpasswd samba_user</div></pre></td></tr></table></figure>
<p>Adding a user to the samba group</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">usermod -a -G sambashare unix_user_name</div></pre></td></tr></table></figure>
<p>On my Cubox I use the following configuration (<code>/etc/samba/smb.conf</code>):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[global]</div><div class="line">workgroup = iocast</div><div class="line">server string = file server</div><div class="line"># Share-level security: Each share in the workgroup has one or more passwords associated with it. Anyone who knows a valid password for the share can access it.</div><div class="line"># User-level security: 	Each share in the workgroup is configured to allow access from certain users. With each initial tree connection, the Samba server verifies users and their passwords to allow them access to the share.</div><div class="line"># Server-level security: This is the same as user-level security, except that the Samba server uses another server to validate users and their passwords before granting access to the share.</div><div class="line"># Domain-level security: Samba becomes a member of a Windows NT domain and uses one of the domain&apos;s domain controllers—either the PDC or a BDC—to perform authentication. Once authenticated, the user is given a special token that allows her access to any share with appropriate access rights. With this token, the domain controller will not have to revalidate the user&apos;s password each time she attempts to access another share within the domain. The domain controller can be a Windows NT/2000 PDC or BDC, or Samba acting as a Windows NT PDC.</div><div class="line">security = user</div><div class="line">create mask = 0775</div><div class="line">force create mode = 0775</div><div class="line">directory mask = 02775</div><div class="line">force directory mode = 02775</div><div class="line">force group = sambashare</div><div class="line"></div><div class="line">[michel]</div><div class="line">comment = data disk</div><div class="line">path = /storage/data/</div><div class="line">public = no</div><div class="line">writable = yes</div><div class="line">guest ok = no</div><div class="line">valid users = michel karolina</div><div class="line">write list = michel</div><div class="line">read list = karolina</div><div class="line"></div><div class="line">[michel backup]</div><div class="line">comment = data disk backup</div><div class="line">path = /storage/backup/</div><div class="line">public = no</div><div class="line">writable = no</div><div class="line">guest ok = no</div><div class="line">valid users = michel</div><div class="line">write list = michel</div><div class="line"></div><div class="line">[ninalaki]</div><div class="line">comment = data disk1</div><div class="line">path = /storage/data1/</div><div class="line">public = no</div><div class="line">writable = yes</div><div class="line">guest ok = no</div><div class="line">valid users = michel karolina</div><div class="line">write list = michel karolina</div><div class="line"></div><div class="line">[ninalaki backup]</div><div class="line">comment = data disk1 backup</div><div class="line">path = /storage/backup1/</div><div class="line">public = no</div><div class="line">writable = no</div><div class="line">guest ok = no</div><div class="line">valid users = michel karolina</div><div class="line">write list = michel karolina</div><div class="line"></div><div class="line">[scans]</div><div class="line">comment = documents from scanner</div><div class="line">path = /storage/scans/</div><div class="line">guest ok = yes</div><div class="line">guest account = michel</div><div class="line">available = yes</div><div class="line">browsable = yes</div><div class="line">public = yes</div><div class="line">writable = yes</div></pre></td></tr></table></figure>
<h1 id="Disks-management"><a href="#Disks-management" class="headerlink" title="Disks management"></a>Disks management</h1><p>To automatically mount disks on startup, you need to add them to the <code>/etc/fstab</code> configuration file. Also use the option <code>nofail</code> to not report any error if the disk is absent. For more information read the <a href="https://wiki.archlinux.org/index.php/fstab" target="_blank" rel="external">manual on Arch Linux</a></p>
<p>Run <code>lsblk -f</code> or <code>ls -l /dev/disk/by-uuid</code> to list the partitions / disks. Edit the <code>/etc/fstab</code> and prefix the values in the UUID column with <code>UUID=</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># &lt;file system&gt;                           &lt;dir&gt;             &lt;type&gt;  &lt;options&gt;                        &lt;dump&gt;  &lt;pass&gt;</div><div class="line">UUID=54940062-befb-4127-b1fc-15584cd4c2ea /storage/data/    ext4    nofail,rw,relatime,data=ordered  0       0</div><div class="line">UUID=e786913c-ee77-4e04-a0d6-1b70b2b4ff69 /storage/backup/  ext4    nofail,rw,relatime,data=ordered  0       0</div><div class="line">UUID=92e833e1-ecc4-4cd3-9874-969867eb5848 /storage/data1/   ext4    nofail,rw,relatime,data=ordered  0       0</div><div class="line">UUID=b5a1514e-6a87-4ea5-a3ce-a592a41abecc /storage/backup1/ ext4    nofail,rw,relatime,data=ordered  0       0</div></pre></td></tr></table></figure>
<h1 id="Dynamic-DNS"><a href="#Dynamic-DNS" class="headerlink" title="Dynamic DNS"></a>Dynamic DNS</h1><p>If you use <a href="http://www.afraid.org" target="_blank" rel="external">afraid.org</a> as your dynamic DNS service you can get an example <code>cron</code> entry from the <strong>Dynamic DNS</strong> menu entry. It look likes the following</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin</div><div class="line"></div><div class="line">3,8,13,18,23,28,33,38,43,48,53,58 * * * * sleep 37 ; wget -O - http://freedns.afraid.org/dynamic/update.php?key= &gt;&gt; /tmp/freedns_pasithee_mooo_com.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
<p>On Arch Linux you need to do the following changes to use it with <code>systemd/Timers</code> (see <a href="https://wiki.archlinux.org/index.php/Systemd/Timers" target="_blank" rel="external">here</a>). First we need to create a new timer <code>vim /etc/systemd/system/afraid.org.timer</code> and add the following lines</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=timer for service afraid.org.timer</div><div class="line">Requires=network-online.target</div><div class="line">Requires=network.target</div><div class="line">After=dhcpcd.service</div><div class="line"></div><div class="line">[Timer]</div><div class="line">OnCalendar=*:3,8,13,18,23,28,33,38,43,48,53,58</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>Then create a service file of the same name <code>/etc/systemd/system/afraid.org.service</code> and add the following lines</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=service for afraid.org for pasithee.mooo.com</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=simple</div><div class="line">ExecStart=/usr/bin/curl -k http://freedns.afraid.org/dynamic/update.php?key= &gt;&gt; /tmp/freedns_pasithee_mooo_com.log 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p>Now you can test the service.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># test service</div><div class="line">systemctl start afraid.org.service</div><div class="line">systemctl stop afraid.org.service</div></pre></td></tr></table></figure>
<p>As soon as it works you can enable the timer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">systemctl enable afraid.org.timer</div><div class="line">systemctl start afraid.org.timer</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript localization part 1]]></title>
      <url>http://iocast.github.io/en/2014/07/21/web-application/javascript-internationalization-part1.html</url>
      <content type="html"><![CDATA[<p>Take some seconds and thing about how you represent a date or number. Do you convert the object to a string and slices it at the needed position? Or do you extend the Date class and adds some new output representation functionality.</p>
<p>Since the ECMA-402 Standard, published on December 2012, you have some really great new functions which respects the locale settings of your environment.</p>
<p>Okey, lets take a step back. When I was working on my semantic web library calendar web component I searched for a way to represent a Date object inside the DOM tree in different way. One question was is how to represent a Date object in the format  <code>mmmm yyyy</code> or <code>mm/dd/yyyy</code>. So I began to search for examples in the web and many entries dated back to 2009, 2010 and 2011. Some of them were also from 2013, which we really astound. Nonetheless, all answers had once thing in common. They put each component of the representation manually inside a string.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dateobj= <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">dateobj.getDate() + <span class="string">"/"</span> + dateobj.getMonth()+<span class="number">1</span> + <span class="string">"/"</span> + dateobj.getFullYear()</div><div class="line"><span class="comment">// 21/7/2014</span></div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Date</span>.locale = &#123;</div><div class="line">	<span class="attr">en</span>: &#123;</div><div class="line">		<span class="attr">month_names</span>: [<span class="string">'January'</span>, <span class="string">'February'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'May'</span>, <span class="string">'June'</span>, <span class="string">'July'</span>, <span class="string">'August'</span>, <span class="string">'September'</span>, <span class="string">'October'</span>, <span class="string">'November'</span>, <span class="string">'December'</span>],</div><div class="line">		<span class="attr">month_names_short</span>: [<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>]</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.getMonthName = <span class="function"><span class="keyword">function</span>(<span class="params">lang</span>) </span>&#123;</div><div class="line">	lang = lang &amp;&amp; (lang <span class="keyword">in</span> <span class="built_in">Date</span>.locale) ? lang : <span class="string">'en'</span>;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">Date</span>.locale[lang].month_names[<span class="keyword">this</span>.getMonth()];</div><div class="line">&#125;;</div><div class="line"><span class="built_in">Date</span>.prototype.getMonthNameShort = <span class="function"><span class="keyword">function</span>(<span class="params">lang</span>) </span>&#123;</div><div class="line">	lang = lang &amp;&amp; (lang <span class="keyword">in</span> <span class="built_in">Date</span>.locale) ? lang : <span class="string">'en'</span>;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">Date</span>.locale[lang].month_names_short[<span class="keyword">this</span>.getMonth()];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// that can be used as follow:</span></div><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">now.getMonthNameShort + <span class="string">" "</span> + now.getFullYear();</div><div class="line"><span class="comment">// July 2014</span></div></pre></td></tr></table></figure>
<p>The problem you have with these solutions is that they not respect the language sensitive representation of a Date or Number object.</p>
<p>The solution for this is quite simple. Javascript now provides different functions which respect the locale settings of the environment.</p>
<p>For the <code>Date</code> object now have these functions, whereas I personally prefer the <code>toLocaleString()</code></p>
<table>
<thead>
<tr>
<th style="text-align:left">Function</th>
<th style="text-align:left">Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Date.prototype.toLocaleDateString()</td>
<td style="text-align:left">returns a string with a language sensitive representation of the date portion of this date.</td>
</tr>
<tr>
<td style="text-align:left">Date.prototype.toLocaleString()</td>
<td style="text-align:left">returns a string with a language sensitive representation of this date.</td>
</tr>
<tr>
<td style="text-align:left">Date.prototype.toLocaleTimeString()</td>
<td style="text-align:left">returns a string with a language sensitive representation of the time portion of this date.</td>
</tr>
</tbody>
</table>
<p>You can use it as follow</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">date.toLocaleString(<span class="string">'en'</span>, &#123; <span class="attr">month</span>: <span class="string">'long'</span>, <span class="attr">year</span>: <span class="string">'numeric'</span> &#125;);</div><div class="line"><span class="comment">// July 2014</span></div><div class="line">date.toLocaleString(<span class="string">'en'</span>, &#123; <span class="attr">month</span>: <span class="string">'2-digit'</span>, <span class="attr">day</span>: <span class="string">'2-digit'</span>, <span class="attr">year</span>: <span class="string">'numberic'</span> &#125;);</div><div class="line"><span class="comment">// 21/07/2014</span></div></pre></td></tr></table></figure>
<p>where the first parameter is the <code>locale</code> and the second parameter represents the <code>options</code>. The allowed options can be found on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString" target="_blank" rel="external">Mozilla Developer Network</a>. As you can see in the example the main advantage is that you do need to worry about the representation of the date format in the different languages and that you do not need to add manually a leading zero if necessary.</p>
<p>The same applies to the <code>Number</code> object.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Function</th>
<th style="text-align:left">Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Number.prototype.toLocaleString()</td>
<td style="text-align:left">returns a string with a language sensitive representation of this number.</td>
</tr>
</tbody>
</table>
<p>You can use it as follow</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> number = <span class="number">3600</span>;</div><div class="line">number.toLocaleString(<span class="string">'en'</span>);</div><div class="line"><span class="comment">// 3,600</span></div><div class="line">number.toLocaleString(<span class="string">'de'</span>);</div><div class="line"><span class="comment">// 3.600</span></div><div class="line">number.toLocaleString(<span class="string">'en'</span>, &#123;</div><div class="line">	<span class="attr">style</span>: <span class="string">'currency'</span>,</div><div class="line">	<span class="attr">currency</span>: <span class="string">'USD'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// $3,600</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub Pages for a repository compiling using Travis CI]]></title>
      <url>http://iocast.github.io/en/2014/04/17/versioning/github-travis-addition.html</url>
      <content type="html"><![CDATA[<p>First of all check if you have already a <strong>personal access token</strong>.</p>
<p><img src="github_personal_access_tokens.png" alt="GitHub personal access tokens" title="GitHub personal access tokens"></p>
<p>If not, you can follow these <a href="!--￼3--">instructions</a></p>
<p>On Travis we need to grant access to the GitHub repository. Login to Travis and in your account settings under repositories you can enable a project.</p>
<p><img src="travis_grant_repository_access.png" alt="Travis grant access to GitHub repository" title="Travis grant access to GitHub repository"></p>
<p>The next thing is to generate a new secure string for your <code>.travis.yml</code> file. First we need to get the GitHub personal access token, which you generated beforehand. Run the following command to get a list of all your access tokens.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">curl -X GET -u &lt;your_github_username&gt; https://api.github.com/authorizations</div></pre></td></tr></table></figure>
<p>You should get a JSON response which looks like this</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">&#123;</div><div class="line">	"id": 1234567,</div><div class="line">	"url": "https://api.github.com/authorizations/1234567",</div><div class="line">	"app": &#123;</div><div class="line">		"name": "travis: token for pushing from travis (API)",</div><div class="line">		"url": "http://developer.github.com/v3/oauth_authorizations/",</div><div class="line">		"client_id": "00000000000000000000"</div><div class="line">		&#125;,</div><div class="line">	"token": "1abc234d56efghi789",</div><div class="line">	"note": "travis: token for pushing from travis",</div><div class="line">	"note_url": null,</div><div class="line">	"created_at": "2014-01-01T12:00:00Z",</div><div class="line">	"updated_at": "2014-01-01T12:00:00Z",</div><div class="line">	"scopes": [</div><div class="line">		"public_repo"</div><div class="line">	]</div><div class="line">&#125;,</div><div class="line">...</div></pre></td></tr></table></figure>
<p>So we are ready to generate the secure string for Travis. Be sure that you have installed <code>travis</code> rubygem using the following command <code>gem install travis</code>. Open a terminal and go to the folder where <code>.travis.yml</code> lays and add the secure string to it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/the/.travsi.yml/file</div><div class="line">travis encrypt -r &lt;user&gt;/&lt;repository&gt; GH_TOKEN=&lt;token&gt; --add env.global</div></pre></td></tr></table></figure>
<p>That’s all the magic. You are done and can push your changes to the GitHub repository which automatically deploys it on Travis CI.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Joining a Active Directory on Linux - the easiest way!]]></title>
      <url>http://iocast.github.io/en/2013/11/30/server-management/linux-join-ad.html</url>
      <content type="html"><![CDATA[<p>The easiest way, at least for me, is to use the <code>likewise-open</code> package. You can find the official documentation <a href="https://help.ubuntu.com/community/LikewiseOpen" target="_blank" rel="external">here</a>. Under Ubuntu you can simple install this package using <code>apt-get</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get install likewise-open</div></pre></td></tr></table></figure>
<p>Once you have installed it, you can join a Active Directory (AD) as follow.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">domainjoin-cli join --ou Hosting/&lt;path&gt;/&lt;to&gt;/&lt;your&gt;/&lt;organization-unit&gt; &lt;server&gt; &lt;login-user&gt;</div></pre></td></tr></table></figure>
<p>where you need to define the path to your organization unit, which is displayed in the AD as a folder. The second parameter is the server and the last parameter is the user, that have rights to add new things in the AD.</p>
<p>Without any configuration, all AD users have login rights to your server. At first login, each user is getting a personal user folder under <code>/home/likewise-open</code> and then a subfolder named as his username.</p>
<h2 id="Restricting-access-to-specific-groups"><a href="#Restricting-access-to-specific-groups" class="headerlink" title="Restricting access to specific groups"></a>Restricting access to specific groups</h2><p>By default, LikewiseOpen allows all AD users to logon. To limit this to specific groups you need to add required membership settings as follow:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">lwconfig RequireMembershipOf <span class="string">"&lt;server&gt;\\&lt;group-1&gt;"</span> <span class="string">"&lt;erver&gt;\\&lt;group-2&gt;"</span></div><div class="line">lw-update-dns</div></pre></td></tr></table></figure>
<p>If you forget which groups have access to you server, you could check it by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">lwconfig --detail RequireMembershipOf</div></pre></td></tr></table></figure>
<h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>Now you are able to login to your server using active directory authentication:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ssh &lt;ad_domain&gt;\\&lt;user&gt;@&lt;server&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 12.04, PGSQL 9.3, PostGIS 2.1 and PL/R against libgdal1h from scratch]]></title>
      <url>http://iocast.github.io/en/2013/11/11/gis/ubuntu-postgresql-postgis-plr-libgdal1h.html</url>
      <content type="html"><![CDATA[<h2 id="Removing-preinstalled-packages"><a href="#Removing-preinstalled-packages" class="headerlink" title="Removing preinstalled packages"></a>Removing preinstalled packages</h2><p>First we need to check which PostgreSQL, PostGIS and GDAL versions are installed. To do so check your Debian package management system (dpkg).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">dpkg <span class="_">-l</span> | grep <span class="string">'postgres\|gdal'</span></div></pre></td></tr></table></figure>
<p>You should get a list like the following one:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ii  libgdal-dev                        1.10.0-1~precise1                 Geospatial Data Abstraction Library - Development files</div><div class="line">ii  libgdal1-dev                       1.10.0-1~precise1                 Geospatial Data Abstraction Library - Development files</div><div class="line">ii  libgdal1h                          1.10.0-1~precise1                 Geospatial Data Abstraction Library</div><div class="line">ii  postgresql-9.1                     9.1.10-0ubuntu12.04               object-relational SQL database, version 9.1 server</div><div class="line">ii  postgresql-9.1-postgis-2.0         2.0.3-2~precise4                  Geographic objects support <span class="keyword">for</span> PostgreSQL 9.1</div><div class="line">ii  postgresql-9.1-postgis-2.0-scripts 2.0.3-2~precise4                  Geographic objects support <span class="keyword">for</span> PostgreSQL 9.1 -- scripts</div><div class="line">ii  postgresql-client-9.1              9.1.10-0ubuntu12.04               front-end programs <span class="keyword">for</span> PostgreSQL 9.1</div><div class="line">ii  postgresql-client-common           129ubuntu1                        manager <span class="keyword">for</span> multiple PostgreSQL client versions</div><div class="line">ii  postgresql-common                  129ubuntu1                        PostgreSQL database-cluster manager</div><div class="line">ii  postgresql-contrib-9.1             9.1.10-0ubuntu12.04               additional facilities <span class="keyword">for</span> PostgreSQL</div></pre></td></tr></table></figure>
<p>If you want, you could remove these packages as follow:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get purge libgdal-dev libgdal1-dev libgdal1h postgresql-9.1 postgresql-9.1-postgis-2.0 postgresql-9.1-postgis-2.0-scripts postgresql-client-9.1 postgresql-client-common postgresql-common</div><div class="line">apt-get autoremove</div><div class="line">apt-get autoclean</div></pre></td></tr></table></figure>
<h2 id="Installing-PostgreSQL-9-3"><a href="#Installing-PostgreSQL-9-3" class="headerlink" title="Installing PostgreSQL 9.3"></a>Installing PostgreSQL 9.3</h2><p>First you need to find out your release code name:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">lsb_release -c</div></pre></td></tr></table></figure>
<p>which get you something like that <code>Codename:    precise</code></p>
<p>Create a new file <code>codename-pgdg.list</code> in <code>/etc/apt/sources.list.d</code> according to the <a href="https://wiki.postgresql.org/wiki/Apt" title="Apt - PostgreSQL wiki" target="_blank" rel="external">PostgreSQL wiki page</a>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vi /etc/apt/sources.list.d/precise-pgdg.list</div></pre></td></tr></table></figure>
<p>and add the following line</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main</div></pre></td></tr></table></figure>
<p>Now we need to import the repository key from</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -</div></pre></td></tr></table></figure>
<p>Now we can a update the repository and install the required packages from the PostgreSQL repository.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install postgresql-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3</div></pre></td></tr></table></figure>
<h2 id="Compiling-PostGIS-2-1-against-libgdal-gt-1-10-0"><a href="#Compiling-PostGIS-2-1-against-libgdal-gt-1-10-0" class="headerlink" title="Compiling PostGIS 2.1 against libgdal &gt;= 1.10.0"></a>Compiling PostGIS 2.1 against libgdal &gt;= 1.10.0</h2><p>To install PostGIS 2.1 it is important that <code>postgresql-server-dev-x.x</code> is installed, because we need to compile PostGIS against these source files. We are going the install the precompiled <code>libgdal</code> 1.10.0 version from <strong>ubuntugis</strong>.</p>
<p>Install <code>python-software-properties</code> and add the apt sources (repositories):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get install python-software-properties</div><div class="line">add-apt-repository ppa:ubuntugis/ubuntugis-unstable</div><div class="line">apt-get update</div></pre></td></tr></table></figure>
<p>Now install the new GDAL library called <code>libgdal1h</code> and its’ development package</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get install libgdal1h</div><div class="line">apt-cache showpkg libgdal-dev*</div></pre></td></tr></table></figure>
<p>which gets you something like that:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">Provides:</div><div class="line">1.10.0-1~precise1 -</div><div class="line">1.9.0-3.1~pgdg12.4+1 -</div><div class="line">...</div></pre></td></tr></table></figure>
<p>You can install a version using the <figure class="highlight plain"><figcaption><span>flag</span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line">```bash</div><div class="line">apt-get install -f libgdal-dev=1.10.0-1~precise1</div></pre></td></tr></table></figure></p>
<p>Before installing the PostGIS from source we install the required dependencies.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get install make gcc checkinstall libxml2-dev libproj-dev libgeos-dev</div></pre></td></tr></table></figure>
<p>Download the latest PostGIS source and compile it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget http://download.osgeo.org/postgis/<span class="built_in">source</span>/postgis-2.1.0.tar.gz</div><div class="line">tar xzvf postgis-2.1.0.tar.gz</div><div class="line"><span class="built_in">cd</span> postgis-2.1.0</div><div class="line">./configure</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"> PostGIS is now configured <span class="keyword">for</span> x86_64-unknown-linux-gnu</div><div class="line"></div><div class="line">-------------- Compiler Info -------------</div><div class="line"> C compiler:           gcc -g -O2</div><div class="line"> C++ compiler:         g++ -g -O2</div><div class="line"> SQL preprocessor:     /usr/bin/cpp -traditional-cpp -P</div><div class="line"></div><div class="line">-------------- Dependencies --------------</div><div class="line"> GEOS config:          /usr/bin/geos-config</div><div class="line"> GEOS version:         3.3.8</div><div class="line"> GDAL config:          /usr/bin/gdal-config</div><div class="line"> GDAL version:         1.10.0</div><div class="line"> PostgreSQL config:    /usr/bin/pg_config</div><div class="line"> PostgreSQL version:   PostgreSQL 9.3.1</div><div class="line"> PROJ4 version:        48</div><div class="line"> Libxml2 config:       /usr/bin/xml2-config</div><div class="line"> Libxml2 version:      2.8.0</div><div class="line"> JSON-C support:       no</div><div class="line"> PostGIS debug level:  0</div><div class="line"> Perl:                 /usr/bin/perl</div><div class="line"></div><div class="line">--------------- Extensions ---------------</div><div class="line"> PostGIS Raster:       enabled</div><div class="line"> PostGIS Topology:     enabled</div><div class="line"> SFCGAL support:       disabled</div><div class="line"></div><div class="line">-------- Documentation Generation --------</div><div class="line"> xsltproc:             </div><div class="line"> xsl style sheets:     </div><div class="line"> dblatex:              </div><div class="line"> convert:              </div><div class="line"> mathml2.dtd:          http://www.w3.org/Math/DTD/mathml2/mathml2.dtd</div></pre></td></tr></table></figure>
<p>use <code>checkinstall</code>, which runs <code>make install</code> and registers the package in <code>dpkg</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">make</div><div class="line">checkinstall</div></pre></td></tr></table></figure>
<h2 id="R-3-0-2-and-PL-R-for-PostgreSQL"><a href="#R-3-0-2-and-PL-R-for-PostgreSQL" class="headerlink" title="R 3.0.2 and PL/R for PostgreSQL"></a>R 3.0.2 and PL/R for PostgreSQL</h2><p>Before we can install PL/R extension for PostgreSQL 9.3 we need to install R 3.0.2 as describe on the <a href="http://cran.r-project.org" title="The Comprehensive R Archive Network" target="_blank" rel="external">R-Project</a> site. First edit the</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vi /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>and add the following line and do a update</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">deb http://cran.r-project.org/bin/linux/ubuntu precise/</div></pre></td></tr></table></figure>
<p>as well as the key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9</div><div class="line">apt-get update</div></pre></td></tr></table></figure>
<p>The search for the 3.0.2 R package version and install it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-cache showpkg r-base</div><div class="line">apt-get install <span class="_">-f</span> r-base=3.0.2-1precise0</div></pre></td></tr></table></figure>
<p>Lastly we can install the PL/R extension for PostgreSQL from the PostgreSQL apt repository</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-get install postgresql-9.3-plr</div></pre></td></tr></table></figure>
<p>So … we are ready … have fun.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 2.7.x and mod_wsgi on a CentOS 6]]></title>
      <url>http://iocast.github.io/en/2013/10/16/web-application/centos-python-modwsgi.html</url>
      <content type="html"><![CDATA[<p>When you have installed CentOS 6 using the minimal image we need first to do some preparation. Fist login into your system and enable your <code>eth0</code> at startup.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>and set <code>ONBOOT</code> to <code>yes</code>.</p>
<h2 id="Getting-Python-2-7-x"><a href="#Getting-Python-2-7-x" class="headerlink" title="Getting Python 2.7.x"></a>Getting Python 2.7.x</h2><p>The following explanations are based on a blog of <a href="http://blog.nickhowell.co.uk/2010/11/30/setup-osqa-on-centos-5-5" title="Setup OSQA on CentOS 5.5 | nickhowell.co.uk" target="_blank" rel="external">Asim Teeshan</a> and a post on <a href="http://www.fir3net.com/Redhat-/-Fedora/how-do-i-compile-modwgsi-for-python-27.html" title="How do I compile mod_wsgi for Python 2.7" target="_blank" rel="external">Fire3Net</a>.</p>
<p>First we need some development tools. Install the following once</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum install gcc make zlib-devel bzip2-devel openssl-devel</div></pre></td></tr></table></figure>
<p>Now download the latest 2.7.x Python release and enable shared library during the configuation</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt/</div><div class="line">wget http://python.org/ftp/python/2.7.5/Python-2.7.5.tgz</div></pre></td></tr></table></figure>
<p>Extract and install it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">tar -zxvf Python-2.7.5.tgz</div><div class="line"><span class="built_in">cd</span> Python-2.7.5</div><div class="line">./configure --enable-shared</div><div class="line">make &amp;&amp; make altinstall</div></pre></td></tr></table></figure>
<p>Install Python setuptools for using <code>easy_setup</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg</div><div class="line">sh setuptools-0.6c11-py2.7.egg</div></pre></td></tr></table></figure>
<p>Before we can install <code>mod_wsgi</code> we need to install the http development libraries</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum install httpd httpd-devel</div></pre></td></tr></table></figure>
<p>Now we are ready to compile <code>mod_wsgi</code> against Python 2.7.x</p>
<p>Download and unpack the latest version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget http://modwsgi.googlecode.com/files/mod_wsgi-3.4.tar.gz</div><div class="line">tar -zxvf mod_wsgi-3.4.tar.gz</div><div class="line"><span class="built_in">cd</span> mod_wsgi-3.4.tar.gz</div><div class="line">./configure --with-python=/usr/<span class="built_in">local</span>/bin/python2.7</div></pre></td></tr></table></figure>
<p>Make sure you specify the path to the python binary. You can find out where your Python binary is by issuing the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">whereis python</div></pre></td></tr></table></figure>
<p>Once the configuration completed you can install it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>If you run into problems along the lines <strong>cannot load shared library libpython2.7…</strong> then you need run the <code>ldconfig</code> first to tell where the <code>libpython2.7.so*</code> files are:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/lib/libpython2.7.so.1.0 /usr/lib/</div><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/lib/libpython2.7.so /usr/</div><div class="line">ldconfig</div></pre></td></tr></table></figure>
<p>Lastly we can install <code>virtualenv</code> as follow:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget http://pypi.python.org/packages/<span class="built_in">source</span>/v/virtualenv/virtualenv-1.10.1.tar.gz</div><div class="line">tar -zxvf virtualenv-1.10.1.tar.gz</div><div class="line"><span class="built_in">cd</span> virtualenv-1.10.1</div><div class="line">python2.7 setup.py install</div></pre></td></tr></table></figure>
<p>install psycopg2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget --no-check-certificate https://pypi.python.org/packages/<span class="built_in">source</span>/p/psycopg2/psycopg2-2.5.1.tar.gz</div><div class="line">tar -zxvf psycopg2-2.5.1.tar.gz</div><div class="line"><span class="built_in">cd</span> psycopg2-2.5.1</div><div class="line">vi setup.cfg</div></pre></td></tr></table></figure>
<p>and add the following line</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pg_config=/usr/pgsql-9.3/bin/pg_config</div></pre></td></tr></table></figure>
<p>now install it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/python2.7 setup.py install</div></pre></td></tr></table></figure>
<p>now creating a virtual env for you web application do it as follow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">virtualenv-2.7 --system-site-packages ENV</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Setting up a QGIS server and PostGIS on CentOS 6]]></title>
      <url>http://iocast.github.io/en/2013/10/12/gis/qgis-server-centos.html</url>
      <content type="html"><![CDATA[<p>QGIS server provides a web map server (WMS) by simply copying a QGIS project int the server directory. If you want to depend on newer <code>postgresql-libs</code> you need first to install the desired version of PostgreSQL and PostGIS as described bellow.</p>
<h2 id="PostgreSQL-and-PostGIS"><a href="#PostgreSQL-and-PostGIS" class="headerlink" title="PostgreSQL and PostGIS"></a>PostgreSQL and PostGIS</h2><p>The following instructions are adapted from  <a href="http://wiki.postgresql.org/wiki/YUM_Installation#Configure_your_YUM_repository" target="_blank" rel="external">YUM installation - PostgreSQL wiki</a> and <a href="http://trac.osgeo.org/postgis/wiki/UsersWikiPostGIS20CentOS6pgdg" target="_blank" rel="external">UsersWikiuPostGIS20CentOS6pgdg - PostGIS</a>.</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><p>Configure yum repository</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vi /etc/yum.repos.d/CentOS-Base.repo</div></pre></td></tr></table></figure>
<p>and add the following excludes to <code>base</code> and <code>updates</code> sections:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line">exclude=postgresql*</div></pre></td></tr></table></figure>
<h3 id="Install-PGDG-RPM-file"><a href="#Install-PGDG-RPM-file" class="headerlink" title="Install PGDG RPM file"></a>Install PGDG RPM file</h3><p>A PGDG file is available for each distribution/architecture/database version combination at <a href="http://yum.postgresql.org" target="_blank" rel="external">http://yum.postgresql.org</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget http://yum.postgresql.org/&lt;version&gt;/&lt;distribution&gt;/&lt;architecture&gt;/pgdg-&lt;database&gt;.noarch.rpm</div></pre></td></tr></table></figure>
<p>where version is <code>9.3</code>, distribution is <code>redhat</code>, architecture is <code>rhel-6-x86_64</code> and database is <code>centos93-9.3-1</code>.</p>
<p>Install RPM distribution:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">rpm -ivh pgdg-centos93-9.3-1.noarch.rpm</div></pre></td></tr></table></figure>
<h3 id="Installation-of-PostgreSQL-and-PostGIS"><a href="#Installation-of-PostgreSQL-and-PostGIS" class="headerlink" title="Installation of PostgreSQL and PostGIS"></a>Installation of PostgreSQL and PostGIS</h3><p>List the available packages:</p>
<pre><code>:::bash
yum list postgres*
</code></pre><p>Installation:</p>
<pre><code>:::bash
yum install postgresql93-libs.x86_64 postgresql93-server.x86_64 postgresql93-devel.x86_64 postgis2_93
</code></pre><h3 id="Configuration-1"><a href="#Configuration-1" class="headerlink" title="Configuration"></a>Configuration</h3><p>Now perform a few post-installation setup commands, in the order: (1) Initialize the database cluster (required), (2) start database (recommended, if you want to use it straight away), (3) allow it to start-up automatically on reboot (recommended):</p>
<pre><code>:::bash
service postgresql-9.3 initdb
service postgresql-9.3 start
chkconfig postgresql-9.3 on
</code></pre><p>Some important files</p>
<table>
<thead>
<tr>
<th style="text-align:left">File / Application</th>
<th style="text-align:left">Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/var/lib/pgsql/9.3/data/postgresql.conf</td>
<td style="text-align:left">changing host etc.</td>
</tr>
<tr>
<td style="text-align:left">/var/lib/pgsql/9.3/data/pg_hba.conf</td>
<td style="text-align:left">client authentication configuration</td>
</tr>
</tbody>
</table>
<p>In the <code>pg_hba.conf</code> file comment out the <code>ident</code> lines except for unix domain socket and add two new lines for <code>md5 encryption</code></p>
<pre><code>:::yaml
# IPv4 local connections:
#host    all             all             127.0.0.1/32            ident
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
#host    all             all             ::1/128                 ident
host    all             all             ::1/128                 md5
</code></pre><h3 id="Database-and-User"><a href="#Database-and-User" class="headerlink" title="Database and User"></a>Database and User</h3><p>Before we can start, we need to create a new database and user.</p>
<p>Login as <code>postgres</code> superuser and create a new database</p>
<pre><code>:::bash
su -l postgres
createdb gis
</code></pre><p>Login into the database create a user and set a encrypted password</p>
<pre><code>:::bash
psql gis
CREATE USER gis WITH SUPERUSER LOGIN PASSWORD &apos;gis&apos;;
ALTER USER gis WITH ENCRYPTED PASSWORD &apos;gis&apos;;
</code></pre><p>Now test your configuration and install PostGIS extension</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">psql -h localhost <span class="_">-d</span> gis -U gis -W</div><div class="line">CREATE EXTENSION postgis;</div></pre></td></tr></table></figure>
<h2 id="Installation-QGIS"><a href="#Installation-QGIS" class="headerlink" title="Installation QGIS"></a>Installation QGIS</h2><p>First you need a running CentOS on a machine. In the default CentOS software repository <code>qgis-server</code> is not available. So you need first to add extra packages for enterprise linux (EPEL) repository as follow:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-&lt;version&gt;.noarch.rpm</div><div class="line">rpm -Uvh epel-release-&lt;version&gt;.noarch.rpm</div></pre></td></tr></table></figure>
<p>where the version I have tested it was <code>6-8</code>.</p>
<p>Add the ELGIS repositories</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget http://elgis.argeo.org/repos/6/elgis-release-&lt;version&gt;.noarch.rpm</div><div class="line">rpm -Uvh elgis-release-6-6_0.noarch.rpm</div></pre></td></tr></table></figure>
<p>where the version I have tested it was <code>6-6_0</code>.</p>
<p>Now install QGIS server:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum install qgis-mapserver.x86_64</div></pre></td></tr></table></figure>
<p>If you want to have QGIS libraries, QGIS Desktop run the following command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">yum install qgis*</div></pre></td></tr></table></figure>
<p>The scripts and configs are installed on CentOS:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Script / Config</th>
<th style="text-align:left">Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/usr/libexec/qgis/qgis_mapserv.fcgi</td>
<td style="text-align:left">main fast cgi script (OGC capabilities)</td>
</tr>
<tr>
<td style="text-align:left">/etc/httpd/conf.d/qgis-mapserver.conf</td>
<td style="text-align:left">qgis mapserver httpd configuration file</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS X file server migration]]></title>
      <url>http://iocast.github.io/en/2013/10/09/server-management/osx-file-server-migration.html</url>
      <content type="html"><![CDATA[<p>Managing a OS X server is sometimes a pain, when it comes to manage ACL permissions on the file system using OS X Server share point application. For example if you want to migrate from one file server to another you need to define all shares and ACLs again or if you want to propagate permissions on a share with explicit ACLs on a sub-directory you are going to overwrite these explicit ACLs.</p>
<p>So to solve these problems and many more I created a little bash script which is able to:</p>
<ul>
<li>sync files from a remote server using <code>rsync</code></li>
<li>changing the POSIX permissions on the local server after sync</li>
<li>creating optionally a share point for each folder to be synced</li>
<li>propagating ACLs on a share point or on a individual directory.</li>
</ul>
<p>Each of these feature can be used independently. For more information see the project description: <a href="/projects/file-server-management.html">server migration tool</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Creating your own blog using github pages, jekyll and travis]]></title>
      <url>http://iocast.github.io/en/2013/10/08/miscellaneous/github-jekyll-travis.html</url>
      <content type="html"><![CDATA[<p>Github offers at the time of writing three different types of pages: for <a href="https://help.github.com/articles/user-organization-and-project-pages" title="Github Pages (Help)" target="_blank" rel="external">users, organizations and projects</a>. For the users and organizations the <code>master</code> branch is going to be used to deploy as static web page. For projects, means in a repository which is not called <code>username.github.io</code>, a subpath of the user pages would be created <code>username.github.io/projectname</code>.</p>
<p>Hence this post is going to discuss the a simple workflow using <a href="http://github.com/" title="Github" target="_blank" rel="external">Github’s</a> user pages, <a href="http://jekyllrb.com" title="Jekyll" target="_blank" rel="external">jekyll</a> as blog and pseudo dynamic page, <a href="http://travis-ci.org" title="Travis CI" target="_blank" rel="external">travis</a> as our continuous integration solution for deployment purposes.</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>First setup a new user page on Github using for example the page generator or simply setting up a new repository called <code>username.github.io</code>. Github will automatically create a new <code>master</code> branch which is used for deploying the content to the web server. In our case, we need to have a separate branch for our blog which is setup using <a href="http://jekyllrb.com" title="Jekyll" target="_blank" rel="external">jekyll</a>. Therefore create a new branch e.g. called <code>develop</code> as follow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Creates our branch, without any parents (it's an orphan!)</span></div><div class="line">git checkout --orphan develop</div><div class="line"><span class="comment"># Remove all files from the old working tree</span></div><div class="line">git rm -rf .</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"My GitHub Page"</span> &gt; index.html</div><div class="line">git add index.html</div><div class="line">git commit <span class="_">-a</span> -m <span class="string">"First pages commit"</span></div><div class="line">git push origin develop</div></pre></td></tr></table></figure>
<p>Now we are ready to add our <a href="http://jekyllrb.com" title="Jekyll" target="_blank" rel="external">jekyll</a> page to this <code>develop</code> branch.</p>
<h2 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h2><p>Now that we have a <code>master</code> and <code>develop</code> branch, former for the <a href="http://jekyllrb.com" title="Jekyll" target="_blank" rel="external">jekyll</a> compilation and later for your source, we can setup our blog. As described in the <a href="http://jekyllrb.com/docs/home/" title="Jekyll Documentation" target="_blank" rel="external">jekyll documentation</a> we need to have at least a <code>_layouts</code> directory for the templates that wrap posts, a <code>_posts</code> for dynamic content and the rest of html and other files for you layout.</p>
<p>In addition we need to setup a <code>_config.yml</code> file to tell <a href="http://jekyllrb.com" title="Jekyll" target="_blank" rel="external">jekyll</a> the compilation options. A example could look like the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">destination: ./_site</div><div class="line">lsi:         true</div><div class="line">pygments:    true</div><div class="line">markdown:    rdiscount</div><div class="line">permalink:   date</div><div class="line">rdiscount:</div><div class="line">  extensions: [smart]</div><div class="line"></div><div class="line">exclude: [&apos;Gemfile&apos;, &apos;Gemfile.lock&apos;, &apos;Rakefile&apos;, &apos;README.md&apos;, &apos;update-gh-pages.sh&apos;]</div></pre></td></tr></table></figure>
<h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p><a href="http://travis-ci.org" title="Travis CI" target="_blank" rel="external">Travis</a> is used to automatically deploy the <code>develop</code> branch and push the result of the <code>jekyll build</code> output to the <code>master</code> branch which the would be published to the Github pages.</p>
<p>For that we need first to get <a href="http://travis-ci.org" title="Travis CI" target="_blank" rel="external">travis</a> access to our Github repository. If you do not have a <a href="http://travis-ci.org" title="Travis CI" target="_blank" rel="external">travis</a> account register one on the homepage. On The <a href="http://travis-ci.org" title="Travis CI" target="_blank" rel="external">travis</a> homepage go to the account settings and get access to the appropriate repository like in the image below:</p>
<p><img src="travis_repository_access.png" alt="Travis Repository Access" title="Travis Repository Access"></p>
<p>The next step is to configure the build process. For that create a new file called <code>.travis.yml</code> in the root directory of the <code>develop</code> branch and add the <code>master</code> branch to the blacklist and the <code>develop</code> branch to the whitelist.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">language: ruby</div><div class="line">rvm: 1.9.3</div><div class="line"></div><div class="line">branches:</div><div class="line">  except:</div><div class="line">  - master</div><div class="line"></div><div class="line">branches:</div><div class="line">  only:</div><div class="line">  - develop</div><div class="line"></div><div class="line">script: rake travis</div></pre></td></tr></table></figure>
<p>As you can see in the <code>.travis.yml</code> file the <a href="http://jekyllrb.com" title="Jekyll" target="_blank" rel="external">jekyll</a> deployment starts with the command <code>rake travis</code> which is implemented in the <code>Rakefile</code> file which uses the <code>Gemfile</code> for ruby library dependencies. So create the files <code>Gemfile</code> and <code>Rakefile</code> in the root directory of the <code>develop</code> branch.</p>
<p>For the above <code>_config.yml</code> configuration add the following RubyGem dependencies to the <code>Gemfile</code>:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">source <span class="string">'http://rubygems.org'</span></div><div class="line"></div><div class="line">gem <span class="string">'jekyll'</span></div><div class="line">gem <span class="string">'rdiscount'</span></div><div class="line">gem <span class="string">'redcarpet'</span></div></pre></td></tr></table></figure>
<p>For <a href="http://travis-ci.org" title="Travis CI" target="_blank" rel="external">travis</a> deployment add the following task to the <code>Rakefile</code>:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env rake</span></div><div class="line"></div><div class="line">task <span class="symbol">:travis</span> <span class="keyword">do</span></div><div class="line">  system(<span class="string">"jekyll build"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Lastly we need to create a <code>bash</code> script to push the compiled <a href="http://jekyllrb.com" title="Jekyll" target="_blank" rel="external">jekyll</a> page to the <code>master</code> branch. For that authorize <a href="http://travis-ci.org" title="Travis CI" target="_blank" rel="external">travis</a> to do commits and pushed as follow:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">curl -X POST -u &lt;your_github_username&gt; -H <span class="string">"Content-Type: application/json"</span> <span class="_">-d</span> <span class="string">"&#123;\"scopes\":[\"public_repo\"],\"note\":\"token for pushing from travis\"&#125;"</span> https://api.github.com/authorizations</div></pre></td></tr></table></figure>
<p>and copy the <code>token</code> key from the json result.</p>
<p>Now install the travis gem, encrypt the values of environment variables and add it to the <code>.tavis.yml</code> file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gem install travis</div><div class="line">travis encrypt -r &lt;user&gt;/&lt;repository&gt; GH_TOKEN=&lt;token&gt; --add env.global</div></pre></td></tr></table></figure>
<p>Lastly you need to create a bash file which pushes the update to he <code>master</code> branch using the <code>GH_TOKEN</code> which was encrypted before and need to be registered in the <code>.travis.yml</code> as <code>after_success</code> task:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$TRAVIS_PULL_REQUEST</span>"</span> == <span class="string">"false"</span> ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"Starting to update master\n"</span></div><div class="line"></div><div class="line">  cp -R _site <span class="variable">$HOME</span>/_site</div><div class="line"></div><div class="line">  <span class="built_in">cd</span> <span class="variable">$HOME</span></div><div class="line">  git config --global user.email <span class="string">"iocast@me.com"</span></div><div class="line">  git config --global user.name <span class="string">"iocast"</span></div><div class="line">  git <span class="built_in">clone</span> --quiet --branch=master https://<span class="variable">$&#123;GH_TOKEN&#125;</span>@github.com/iocast/iocast.github.io.git master &gt; /dev/null</div><div class="line"></div><div class="line">  <span class="built_in">cd</span> master</div><div class="line">  rm -rf ./*</div><div class="line">  cp -Rf <span class="variable">$HOME</span>/_site/* .</div><div class="line"></div><div class="line">  git add <span class="_">-f</span> .</div><div class="line">  git commit -m <span class="string">"Travis build <span class="variable">$TRAVIS_BUILD_NUMBER</span> pushed to master"</span></div><div class="line">  git push -fq origin master &gt; /dev/null</div><div class="line"></div><div class="line">  <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"Done magic with coverage\n"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>and add the following lines to the end of the <code>.travis.yml</code> file:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">after_success: ./update-gh-pages.sh</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tunneling over an intermediate to overcome demilitarized zone]]></title>
      <url>http://iocast.github.io/en/2011/12/03/miscellaneous/tunneling-over-an-intermediate.html</url>
      <content type="html"><![CDATA[<p>Source code: <a href="resources/code/shell/tunneling.sh">shell script</a></p>
<p>Tunneling over a intermediar is often used to connect to a server which is e.g. in a DMZ. In the following case we have a server that is the company network and does only allow connections on port 22 from the DMZ. Means the server cannot be connection over the internet. In addition, we have a server in the DMZ which allows connection on port 22 from outside (internet) and can connect to the company network over port 22. Last but not least, every time a server restarts we want that the tunnels automatically opens, means that we need to have an <code>cron</code> job that checks, whether an open connection exists from the server to the intermediary or not, and if the server opens a connection to the intermediary the system does not need to prompt for password. Solution is here to register the public key of the server on the intermediary.</p>
<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><h3 id="Opening-a-tunnel-from-client-to-intermediary"><a href="#Opening-a-tunnel-from-client-to-intermediary" class="headerlink" title="Opening a tunnel from client to intermediary"></a>Opening a tunnel from client to intermediary</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ssh -L 22000:127.0.0.1:22000 -N root@152.96.56.32</div></pre></td></tr></table></figure>
<h3 id="Connecting-to-server"><a href="#Connecting-to-server" class="headerlink" title="Connecting to server"></a>Connecting to server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ssh -P 22000 michel@127.0.0.1</div></pre></td></tr></table></figure>
<h3 id="Copy-files-SCP"><a href="#Copy-files-SCP" class="headerlink" title="Copy files (SCP)"></a>Copy files (SCP)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#get</span></div><div class="line">scp -P 22000 michel@127.0.0.1:/home/michel/tunelling.sh /Users/michel/Public/Drop\ Box/</div><div class="line"></div><div class="line"><span class="comment">#put</span></div><div class="line">scp /Users/michel/Public/Drop\ Box/tunelling.sh -P 22000 michel@127.0.0.1:/home/michel/</div></pre></td></tr></table></figure>
<h2 id="Intermediary"><a href="#Intermediary" class="headerlink" title="Intermediary"></a>Intermediary</h2><h3 id="Register-GPG-key-from-server"><a href="#Register-GPG-key-from-server" class="headerlink" title="Register GPG key from server"></a>Register GPG key from server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-key add &lt;file&gt;</div></pre></td></tr></table></figure>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="Export-GPG-key"><a href="#Export-GPG-key" class="headerlink" title="Export GPG key"></a>Export GPG key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">apt-key <span class="built_in">export</span> &lt;key&gt; &gt; &lt;file&gt;</div></pre></td></tr></table></figure>
<h3 id="Open-a-connection-to-intermediary-from-server"><a href="#Open-a-connection-to-intermediary-from-server" class="headerlink" title="Open a connection to intermediary from server"></a>Open a connection to intermediary from server</h3><p>Save the following script as e.g. tunneling.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line">cmd=<span class="string">"ssh -R 22000:127.0.0.1:22 -N root@152.96.56.32"</span></div><div class="line"></div><div class="line">match=$(ps -aef | grep <span class="string">"<span class="variable">$&#123;cmd&#125;</span>"</span> | grep -v grep)</div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;match&#125;</span>"</span> ] ; <span class="keyword">then</span></div><div class="line"><span class="variable">$cmd</span> &amp;</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h3 id="Register-cron-job"><a href="#Register-cron-job" class="headerlink" title="Register cron job"></a>Register cron job</h3><p>Edit crontab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">crontab <span class="_">-e</span></div></pre></td></tr></table></figure>
<p>Adding a new job to the crontab. The following entry executes the defined script <code>tunneling.sh</code> every 5 minutes.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">5 * * * * /&lt;path&gt;/tunnelilng.sh</div></pre></td></tr></table></figure>
<p>Crontab is structured as follow:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">* * * * * <span class="built_in">command</span> to be executed</div><div class="line">- - - - -</div><div class="line">| | | | |</div><div class="line">| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)</div><div class="line">| | | ------- Month (1 - 12)</div><div class="line">| | --------- Day of month (1 - 31)</div><div class="line">| ----------- Hour (0 - 23)</div><div class="line">------------- Minute (0 - 59)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
